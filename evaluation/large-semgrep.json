{
    "fileScanResults": [
        {
            "filepath": "./bad_2100_0.java",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 150,
                                        "endLine": 150,
                                        "snippet": "                Object output = shell.evaluate(script);"
                                    }
                                }
                            ],
                            "message": "A expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation.",
                            "ruleId": "java.lang.security.audit.dangerous-groovy-shell.dangerous-groovy-shell"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_827_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1408_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2228_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_292_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2053_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3870_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3810_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 4,
                                        "endLine": 4,
                                        "snippet": "shell_exec(\"/usr/sbin/oo-restorer-wrapper.sh $uuid\");"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection.",
                            "ruleId": "php.lang.security.exec-use.exec-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_5213_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_789_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4969_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4858_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 213,
                                        "endLine": 213,
                                        "snippet": "\t\tmemset(ctx.master_key_descriptor, 0x42, FS_KEY_DESCRIPTOR_SIZE);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_1464_0.phtml",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2213_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1997_0.java",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 105,
                                        "endLine": 105,
                                        "snippet": "\t@RequestMapping(\"/oauth/confirm_access\")"
                                    }
                                }
                            ],
                            "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                            "ruleId": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_1139_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1511_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2993_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 57,
                                        "endLine": 57,
                                        "snippet": "\t\tmemset(fl4, 0, sizeof(*fl4));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 62,
                                        "endLine": 62,
                                        "snippet": "\t\tmemset(fl6, 0, sizeof(*fl6));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_5373_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 39,
                                        "endLine": 39,
                                        "snippet": "\t$params = @unserialize($params);"
                                    }
                                }
                            ],
                            "message": "Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution. Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).",
                            "ruleId": "php.lang.security.unserialize-use.unserialize-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_4509_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5756_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4496_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1801_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2763_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5617_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4636_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4140_1.go",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5426_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3514_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 101,
                                        "endLine": 101,
                                        "snippet": "\t\tmemset(zero, 0, sizeof(zero));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 174,
                                        "endLine": 174,
                                        "snippet": "\tmemset(&mreq, 0, sizeof(mreq));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_4976_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_641_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1141_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_238_0.cpp",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5818_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4323_0.cpp",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4724_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_777_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2495_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4682_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5352_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 172,
                                        "endLine": 172,
                                        "snippet": "\t\tmemset(&karactx, 0, sizeof karactx);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_4521_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3706_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2743_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4938_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1126_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 73,
                                        "endLine": 73,
                                        "snippet": "\t\t\t\t@unlink(\"{$g['tmp_path']}/passthrumac_gui\");"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 110,
                                        "endLine": 110,
                                        "snippet": "\t\t\t\t@unlink(\"{$g['tmp_path']}/{$uniqid}_tmp\");"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 129,
                                        "endLine": 129,
                                        "snippet": "\t\t@unlink(\"{$g['tmp_path']}/{$uniqid}_tmp\");"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 108,
                                        "endLine": 108,
                                        "snippet": "\t\t\t\tfile_put_contents(\"{$g['tmp_path']}/{$uniqid}_tmp\", $rules);"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 110,
                                        "endLine": 110,
                                        "snippet": "\t\t\t\t@unlink(\"{$g['tmp_path']}/{$uniqid}_tmp\");"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 127,
                                        "endLine": 127,
                                        "snippet": "\t\tfile_put_contents(\"{$g['tmp_path']}/{$uniqid}_tmp\", $rules);"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 129,
                                        "endLine": 129,
                                        "snippet": "\t\t@unlink(\"{$g['tmp_path']}/{$uniqid}_tmp\");"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_3865_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4905_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2414_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_775_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 84,
                                        "endLine": 84,
                                        "snippet": "    let newTmpSubDir = path.join(newTmpDir, subDir);"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 120,
                                        "endLine": 120,
                                        "snippet": "        await fs.remove(path.join(cwd, ignoredFile));"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_3700_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5421_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3586_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5447_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 47,
                                        "endLine": 47,
                                        "snippet": "\t\t$lastline = exec($command, $output, $retval);"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection.",
                            "ruleId": "php.lang.security.exec-use.exec-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_3559_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_873_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_750_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 61,
                                        "endLine": 64,
                                        "snippet": "$query    = \"SELECT `id`, `name`\n             FROM `glpi_crontasks`\n             WHERE `state` = '\".Crontask::STATE_RUNNING.\"'\n                   AND unix_timestamp(`lastrun`) + $cycle * `frequency` < unix_timestamp(now())\";"
                                    }
                                }
                            ],
                            "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.",
                            "ruleId": "php.lang.security.injection.tainted-sql-string.tainted-sql-string"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_2274_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5825_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3252_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2158_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1904_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 71,
                                        "endLine": 71,
                                        "snippet": "   $item = new $itemtype();"
                                    }
                                }
                            ],
                            "message": "<- A new object is created where the class name is based on user input. This could lead to remote code execution, as it allows to instantiate any class in the application.",
                            "ruleId": "php.lang.security.injection.tainted-object-instantiation.tainted-object-instantiation"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 121,
                                        "endLine": 121,
                                        "snippet": "   $item = new $itemtype();"
                                    }
                                }
                            ],
                            "message": "<- A new object is created where the class name is based on user input. This could lead to remote code execution, as it allows to instantiate any class in the application.",
                            "ruleId": "php.lang.security.injection.tainted-object-instantiation.tainted-object-instantiation"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 127,
                                        "endLine": 127,
                                        "snippet": "   $item = new $itemtype();"
                                    }
                                }
                            ],
                            "message": "<- A new object is created where the class name is based on user input. This could lead to remote code execution, as it allows to instantiate any class in the application.",
                            "ruleId": "php.lang.security.injection.tainted-object-instantiation.tainted-object-instantiation"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 144,
                                        "endLine": 144,
                                        "snippet": "   $kanban = new $_REQUEST['kanban']['itemtype'];"
                                    }
                                }
                            ],
                            "message": "<- A new object is created where the class name is based on user input. This could lead to remote code execution, as it allows to instantiate any class in the application.",
                            "ruleId": "php.lang.security.injection.tainted-object-instantiation.tainted-object-instantiation"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 203,
                                        "endLine": 203,
                                        "snippet": "   $column_item = new $column_itemtype();"
                                    }
                                }
                            ],
                            "message": "<- A new object is created where the class name is based on user input. This could lead to remote code execution, as it allows to instantiate any class in the application.",
                            "ruleId": "php.lang.security.injection.tainted-object-instantiation.tainted-object-instantiation"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_180_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2930_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3494_0.rb",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 121,
                                        "endLine": 121,
                                        "snippet": "      headers['ETag'] = %(\"#{Digest::MD5.hexdigest(ActiveSupport::Cache.expand_cache_key(etag))}\")"
                                    }
                                }
                            ],
                            "message": "Should not use md5 to generate hashes. md5 is proven to be vulnerable through the use of brute-force attacks. Could also result in collisions, leading to potential collision attacks. Use SHA256 or other hashing functions instead.",
                            "ruleId": "ruby.lang.security.weak-hashes-md5.weak-hashes-md5"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_5186_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5076_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3593_0.cpp",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2186_0.py",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 78,
                                        "endLine": 78,
                                        "snippet": "    return mark_safe(result)"
                                    }
                                }
                            ],
                            "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.",
                            "ruleId": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 97,
                                        "endLine": 97,
                                        "snippet": "    return mark_safe(json_dumps(d)[1:-1] + append)"
                                    }
                                }
                            ],
                            "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.",
                            "ruleId": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_4483_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 89,
                                        "endLine": 89,
                                        "snippet": "    memset(&strm, '\\0', sizeof(strm));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 276,
                                        "endLine": 276,
                                        "snippet": "    memset(&stream, 0, sizeof(stream));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_5010_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1510_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3528_0.rb",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 188,
                                        "endLine": 188,
                                        "snippet": "      regexp = file_list.body.match(/name=[\"']#{Regexp.quote params[:filename]}[\"'].*size=[\"']([^\"']*)[\"']/)"
                                    }
                                }
                            ],
                            "message": "Found a potentially user-controllable argument in the construction of a regular expressions. This may result in excessive resource consumption when applied to certain inputs, or when the user is allowed to control the match target. Avoid allowing users to specify regular expressions processed by the server. If you must support user-controllable input in a regular expression, use an allow-list to restrict the expressions users may supply to limit catastrophic backtracking.",
                            "ruleId": "ruby.rails.security.brakeman.check-regex-dos.check-regex-dos"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_558_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_913_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1344_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3483_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5150_0.phtml",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2951_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_965_0.go",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_663_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_416_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4469_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4601_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 26,
                                        "endLine": 26,
                                        "snippet": "        $ret = exec($cmd,$output);"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection.",
                            "ruleId": "php.lang.security.exec-use.exec-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 26,
                                        "endLine": 26,
                                        "snippet": "        $ret = exec($cmd,$output);"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.",
                            "ruleId": "php.lang.security.tainted-exec.tainted-exec"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_336_0.go",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_584_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2381_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_293_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1750_0.rb",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 4,
                                        "endLine": 4,
                                        "snippet": "      output = `convert #{image_path} -resize 400x400 -format %c -dither None -quantize YIQ -colors #{colors} -depth #{depth} histogram:info:-`"
                                    }
                                }
                            ],
                            "message": "Detected non-static command inside `...`. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code.",
                            "ruleId": "ruby.lang.security.dangerous-subshell.dangerous-subshell"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_5238_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2557_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_833_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_839_0.cpp",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2873_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1346_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1500_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_792_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5399_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5557_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5149_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3758_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5664_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2175_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 96,
                                        "endLine": 96,
                                        "snippet": "        child_process.exec('lpr -P'+printer+' -oraw -r'+' '+temp_file_name, function(err, stdout, stderr){"
                                    }
                                }
                            ],
                            "message": "Detected calls to child_process from a function argument `parameters`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
                            "ruleId": "javascript.lang.security.detect-child-process.detect-child-process"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_4380_0.cc",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4547_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1974_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_556_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2480_1.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3477_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3442_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4339_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 14,
                                        "endLine": 19,
                                        "snippet": "  const regexp = new RegExp(\n    toReplace\n      .map((envVar) => `${escapeRegExp(env[envVar])}|${encodeURI(escapeRegExp(env[envVar]))}`)\n      .join('|'),\n    'g'\n  );"
                                    }
                                }
                            ],
                            "message": "RegExp() called with a `envVar` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",
                            "ruleId": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 14,
                                        "endLine": 19,
                                        "snippet": "  const regexp = new RegExp(\n    toReplace\n      .map((envVar) => `${escapeRegExp(env[envVar])}|${encodeURI(escapeRegExp(env[envVar]))}`)\n      .join('|'),\n    'g'\n  );"
                                    }
                                }
                            ],
                            "message": "RegExp() called with a `env` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",
                            "ruleId": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_1241_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1269_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4928_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1489_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 176,
                                        "endLine": 199,
                                        "snippet": "\t\t$sql = \"INSERT INTO %smembers \n\t\t    VALUES (NULL,\n\t\t        '$_POST[login]',\n\t\t        '$_POST[password]',\n\t\t        '$_POST[email]',\n\t\t        '$_POST[website]',\n\t\t        '$_POST[first_name]', \n\t\t        '$_POST[second_name]', \n\t\t        '$_POST[last_name]', \n\t\t        '$dob', "
                                    }
                                }
                            ],
                            "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.",
                            "ruleId": "php.lang.security.injection.tainted-sql-string.tainted-sql-string"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 160,
                                        "endLine": 160,
                                        "snippet": "\t\t\t$_POST['website'] = 'http://' . $_POST['website']; "
                                    }
                                }
                            ],
                            "message": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host.",
                            "ruleId": "php.lang.security.injection.tainted-url-host.tainted-url-host"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_5184_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2476_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3584_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5445_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 47,
                                        "endLine": 47,
                                        "snippet": "\t\t$lastline = exec($command, $output, $retval);"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection.",
                            "ruleId": "php.lang.security.exec-use.exec-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_5247_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5827_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 132,
                                        "endLine": 132,
                                        "snippet": "        memset(dummy_buf, 0, sizeof(dummy_buf));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_206_0.h",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1397_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5635_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2522_0.h",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_549_0.rb",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 25,
                                        "endLine": 25,
                                        "snippet": "    content_tag(:ul) do"
                                    }
                                }
                            ],
                            "message": "'content_tag()' bypasses HTML escaping for some portion of the content. If external data can reach here, this exposes your application to cross-site scripting (XSS) attacks. Ensure no external data reaches here. If you must do this, create your HTML manually and use 'html_safe'. Ensure no external data enters the HTML-safe string!",
                            "ruleId": "ruby.rails.security.audit.xss.avoid-content-tag.avoid-content-tag"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 27,
                                        "endLine": 27,
                                        "snippet": "        concat(content_tag(:li, tag.name))"
                                    }
                                }
                            ],
                            "message": "'content_tag()' bypasses HTML escaping for some portion of the content. If external data can reach here, this exposes your application to cross-site scripting (XSS) attacks. Ensure no external data reaches here. If you must do this, create your HTML manually and use 'html_safe'. Ensure no external data enters the HTML-safe string!",
                            "ruleId": "ruby.rails.security.audit.xss.avoid-content-tag.avoid-content-tag"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 12,
                                        "endLine": 12,
                                        "snippet": "    model.tags.inject(\"\".html_safe) do |out, tag|"
                                    }
                                }
                            ],
                            "message": "'html_safe()' does not make the supplied string safe. 'html_safe()' bypasses HTML escaping. If external data can reach here, this exposes your application to cross-site scripting (XSS) attacks. Ensure no external data reaches here.",
                            "ruleId": "ruby.rails.security.audit.xss.avoid-html-safe.avoid-html-safe"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_3747_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3278_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3702_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1712_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 116,
                                        "endLine": 116,
                                        "snippet": "    $captcha_config = unserialize($_SESSION['_CAPTCHA']['config']);"
                                    }
                                }
                            ],
                            "message": "Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution. Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).",
                            "ruleId": "php.lang.security.unserialize-use.unserialize-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_2437_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5358_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4734_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1036_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4665_0.cc",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2349_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 32,
                                        "endLine": 32,
                                        "snippet": "$sql=\"SELECT * FROM `\" . table_users . \"` where `user_login` = '\".$username.\"' AND `last_reset_request` = FROM_UNIXTIME('\".$n.\"') AND user_level!='Spammer'\";"
                                    }
                                }
                            ],
                            "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.",
                            "ruleId": "php.lang.security.injection.tainted-sql-string.tainted-sql-string"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 75,
                                        "endLine": 75,
                                        "snippet": "\t\t\t\t\t$db->query('UPDATE `' . table_users . \"` SET `user_pass` = '$saltedPass' WHERE `user_login` = '\".$user->user_login.\"'\");"
                                    }
                                }
                            ],
                            "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.",
                            "ruleId": "php.lang.security.injection.tainted-sql-string.tainted-sql-string"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 76,
                                        "endLine": 76,
                                        "snippet": "\t\t\t\t\t$db->query('UPDATE `' . table_users . '` SET `last_reset_request` = FROM_UNIXTIME('.time().') WHERE `user_login` = \"'.$user->user_login.'\"');"
                                    }
                                }
                            ],
                            "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.",
                            "ruleId": "php.lang.security.injection.tainted-sql-string.tainted-sql-string"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_1862_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_884_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3798_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3481_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2386_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 355,
                                        "endLine": 355,
                                        "snippet": "\tmemset(&key->payload, KEY_DESTROY, sizeof(key->payload));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_1145_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1857_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_440_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3235_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1558_0.rb",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 18,
                                        "endLine": 120,
                                        "snippet": "class ApplicationController < ActionController::Base\n\n  require 'will_paginate'\n  require ::Rails.root.to_s+'/lib/iain-http_accept_language/lib/http_accept_language'\n\n# helper :all # include all helpers, all the time\n  protect_from_forgery\n\n  before_filter :set_locale\n  before_filter :gate_process"
                                    }
                                }
                            ],
                            "message": "Detected controller which does not enable cross-site request forgery protections using 'protect_from_forgery'. Add 'protect_from_forgery :with => :exception' to your controller class.",
                            "ruleId": "ruby.lang.security.missing-csrf-protection.missing-csrf-protection"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_441_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5350_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 281,
                                        "endLine": 281,
                                        "snippet": "\tmemset(ctx->result, 0, ds);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_269_0.go",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 49,
                                        "endLine": 49,
                                        "snippet": "\t\t\"next\":     template.URL(url.QueryEscape(redirectURL)),"
                                    }
                                }
                            ],
                            "message": "Semgrep could not determine that the argument to 'template.HTML()' is a constant. 'template.HTML()' and similar does not escape contents. Be absolutely sure there is no user-controlled data in this template. If user data can reach this template, you may have a XSS vulnerability. Instead, do not use this function and use 'template.Execute()'.",
                            "ruleId": "go.lang.security.audit.xss.template-html-does-not-escape.unsafe-template-type"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 128,
                                        "endLine": 128,
                                        "snippet": "\t\t\"next\":       template.URL(url.QueryEscape(redirectURL)),"
                                    }
                                }
                            ],
                            "message": "Semgrep could not determine that the argument to 'template.HTML()' is a constant. 'template.HTML()' and similar does not escape contents. Be absolutely sure there is no user-controlled data in this template. If user data can reach this template, you may have a XSS vulnerability. Instead, do not use this function and use 'template.Execute()'.",
                            "ruleId": "go.lang.security.audit.xss.template-html-does-not-escape.unsafe-template-type"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_3134_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4974_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5159_0.phtml",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1671_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_103_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 176,
                                        "endLine": 176,
                                        "snippet": "\t\t$variables[$a[$i]] = unserialize($a[$i + 1]);"
                                    }
                                }
                            ],
                            "message": "Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution. Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).",
                            "ruleId": "php.lang.security.unserialize-use.unserialize-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_5789_1.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5680_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4286_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3332_0.py",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 159,
                                        "endLine": 159,
                                        "snippet": "        sha1 = hashlib.sha1()"
                                    }
                                }
                            ],
                            "message": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.",
                            "ruleId": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 175,
                                        "endLine": 175,
                                        "snippet": "        sha1 = hashlib.sha1()"
                                    }
                                }
                            ],
                            "message": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.",
                            "ruleId": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 72,
                                        "endLine": 72,
                                        "snippet": "        class_ = import_module(auth_type).Auth"
                                    }
                                }
                            ],
                            "message": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.",
                            "ruleId": "python.lang.security.audit.non-literal-import.non-literal-import"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_5813_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5443_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 43,
                                        "endLine": 43,
                                        "snippet": "\t\t$lastline = exec($command, $output, $retval);"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection.",
                            "ruleId": "php.lang.security.exec-use.exec-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_5185_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2280_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1519_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3606_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2350_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 32,
                                        "endLine": 32,
                                        "snippet": "$sql=\"SELECT * FROM `\" . table_users . \"` where `user_login` = '\".$username.\"' AND `last_reset_request` = FROM_UNIXTIME('\".$n.\"') AND user_level!='Spammer'\";"
                                    }
                                }
                            ],
                            "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.",
                            "ruleId": "php.lang.security.injection.tainted-sql-string.tainted-sql-string"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 75,
                                        "endLine": 75,
                                        "snippet": "\t\t\t\t\t$db->query('UPDATE `' . table_users . \"` SET `user_pass` = '$saltedPass' WHERE `user_login` = '\".$user->user_login.\"'\");"
                                    }
                                }
                            ],
                            "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.",
                            "ruleId": "php.lang.security.injection.tainted-sql-string.tainted-sql-string"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 76,
                                        "endLine": 76,
                                        "snippet": "\t\t\t\t\t$db->query('UPDATE `' . table_users . '` SET `last_reset_request` = FROM_UNIXTIME('.time().') WHERE `user_login` = \"'.$user->user_login.'\"');"
                                    }
                                }
                            ],
                            "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.",
                            "ruleId": "php.lang.security.injection.tainted-sql-string.tainted-sql-string"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_3292_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 119,
                                        "endLine": 119,
                                        "snippet": "\t\t\t\tunlink(str_replace(array(\"{wwwroot}\",\"{staticroot}\"),SITE_ROOT,$file_location));"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 144,
                                        "endLine": 144,
                                        "snippet": "\t\t\t\tunlink($local_file);"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 159,
                                        "endLine": 159,
                                        "snippet": "\t\t\t\t\tunlink($local_file);"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 198,
                                        "endLine": 198,
                                        "snippet": "\t\t\t\tunlink($local_file);"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 240,
                                        "endLine": 240,
                                        "snippet": "\t\t\t\t\tunlink($local_file);"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_1240_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 35,
                                        "endLine": 35,
                                        "snippet": "\tmemset(&raead, 0, sizeof(raead));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 52,
                                        "endLine": 52,
                                        "snippet": "\tmemset(&rcipher, 0, sizeof(rcipher));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 69,
                                        "endLine": 69,
                                        "snippet": "\tmemset(&rcomp, 0, sizeof(rcomp));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 85,
                                        "endLine": 85,
                                        "snippet": "\tmemset(&racomp, 0, sizeof(racomp));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 101,
                                        "endLine": 101,
                                        "snippet": "\tmemset(&rakcipher, 0, sizeof(rakcipher));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 120,
                                        "endLine": 120,
                                        "snippet": "\tmemset(&rkpp, 0, sizeof(rkpp));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 136,
                                        "endLine": 136,
                                        "snippet": "\tmemset(&rhash, 0, sizeof(rhash));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 151,
                                        "endLine": 151,
                                        "snippet": "\tmemset(&rhash, 0, sizeof(rhash));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 166,
                                        "endLine": 166,
                                        "snippet": "\tmemset(&rrng, 0, sizeof(rrng));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 182,
                                        "endLine": 182,
                                        "snippet": "\tmemset(ualg, 0, sizeof(*ualg));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 200,
                                        "endLine": 200,
                                        "snippet": "\t\tmemset(&rl, 0, sizeof(rl));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_3741_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4542_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3310_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 128,
                                        "endLine": 128,
                                        "snippet": "\tmemset(hx,0,sizeof(struct hexline));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_2857_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2754_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4229_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4712_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5553_0.rb",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 167,
                                        "endLine": 167,
                                        "snippet": "        OpenSSL::HMAC.hexdigest(OpenSSL::Digest::SHA1.new, secret, data)"
                                    }
                                }
                            ],
                            "message": "Should not use SHA1 to generate hashes. There is a proven SHA1 hash collision by Google, which could lead to vulnerabilities. Use SHA256, SHA3 or other hashing functions instead.",
                            "ruleId": "ruby.lang.security.weak-hashes-sha1.weak-hashes-sha1"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_1249_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3480_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4594_0.cpp",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5872_0.h",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4662_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4371_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3723_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1978_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_980_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_753_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4244_0.cpp",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_752_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5567_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 106,
                                        "endLine": 106,
                                        "snippet": "\tmemset(&hmac_misc, 0, sizeof hmac_misc);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 253,
                                        "endLine": 253,
                                        "snippet": "\tmemset(ekp->decrypted_data, 0, ekp->decrypted_datalen);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_4104_0.go",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1379_0.h",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5447_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 43,
                                        "endLine": 43,
                                        "snippet": "\t\t$lastline = exec($command, $output, $retval);"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection.",
                            "ruleId": "php.lang.security.exec-use.exec-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_781_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 102,
                                        "endLine": 102,
                                        "snippet": "    obj = obj[key];"
                                    }
                                }
                            ],
                            "message": "Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.",
                            "ruleId": "javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_3586_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4608_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 152,
                                        "endLine": 152,
                                        "snippet": "                rule.condition = eval(\"(\" + rule.condition + \")\");"
                                    }
                                }
                            ],
                            "message": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.",
                            "ruleId": "javascript.browser.security.eval-detected.eval-detected"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 153,
                                        "endLine": 153,
                                        "snippet": "                rule.consequence = eval(\"(\" + rule.consequence + \")\");"
                                    }
                                }
                            ],
                            "message": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.",
                            "ruleId": "javascript.browser.security.eval-detected.eval-detected"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 157,
                                        "endLine": 157,
                                        "snippet": "            rules.condition = eval(\"(\" + rules.condition + \")\");"
                                    }
                                }
                            ],
                            "message": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.",
                            "ruleId": "javascript.browser.security.eval-detected.eval-detected"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 158,
                                        "endLine": 158,
                                        "snippet": "            rules.consequence = eval(\"(\" + rules.consequence + \")\");"
                                    }
                                }
                            ],
                            "message": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.",
                            "ruleId": "javascript.browser.security.eval-detected.eval-detected"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_3700_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4178_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4686_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2170_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4309_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2092_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4453_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5552_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1904_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 69,
                                        "endLine": 69,
                                        "snippet": "   $item = new $itemtype();"
                                    }
                                }
                            ],
                            "message": "<- A new object is created where the class name is based on user input. This could lead to remote code execution, as it allows to instantiate any class in the application.",
                            "ruleId": "php.lang.security.injection.tainted-object-instantiation.tainted-object-instantiation"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 119,
                                        "endLine": 119,
                                        "snippet": "   $item = new $itemtype();"
                                    }
                                }
                            ],
                            "message": "<- A new object is created where the class name is based on user input. This could lead to remote code execution, as it allows to instantiate any class in the application.",
                            "ruleId": "php.lang.security.injection.tainted-object-instantiation.tainted-object-instantiation"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 125,
                                        "endLine": 125,
                                        "snippet": "   $item = new $itemtype();"
                                    }
                                }
                            ],
                            "message": "<- A new object is created where the class name is based on user input. This could lead to remote code execution, as it allows to instantiate any class in the application.",
                            "ruleId": "php.lang.security.injection.tainted-object-instantiation.tainted-object-instantiation"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 142,
                                        "endLine": 142,
                                        "snippet": "   $kanban = new $_REQUEST['kanban']['itemtype'];"
                                    }
                                }
                            ],
                            "message": "<- A new object is created where the class name is based on user input. This could lead to remote code execution, as it allows to instantiate any class in the application.",
                            "ruleId": "php.lang.security.injection.tainted-object-instantiation.tainted-object-instantiation"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 201,
                                        "endLine": 201,
                                        "snippet": "   $column_item = new $column_itemtype();"
                                    }
                                }
                            ],
                            "message": "<- A new object is created where the class name is based on user input. This could lead to remote code execution, as it allows to instantiate any class in the application.",
                            "ruleId": "php.lang.security.injection.tainted-object-instantiation.tainted-object-instantiation"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_555_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4708_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2274_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1545_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1250_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_271_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2501_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1536_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3559_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_873_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3333_0.py",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 82,
                                        "endLine": 82,
                                        "snippet": "    sha1 = hashlib.sha1()  # pylint: disable=E1101"
                                    }
                                }
                            ],
                            "message": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.",
                            "ruleId": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 95,
                                        "endLine": 95,
                                        "snippet": "    sha1 = hashlib.sha1()  # pylint: disable=E1101"
                                    }
                                }
                            ],
                            "message": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.",
                            "ruleId": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_4640_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4386_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_848_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1344_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3490_0.rb",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 23,
                                        "endLine": 23,
                                        "snippet": "        s.gsub(/[&\"><]/) { |special| HTML_ESCAPE[special] }.html_safe"
                                    }
                                }
                            ],
                            "message": "'html_safe()' does not make the supplied string safe. 'html_safe()' bypasses HTML escaping. If external data can reach here, this exposes your application to cross-site scripting (XSS) attacks. Ensure no external data reaches here.",
                            "ruleId": "ruby.rails.security.audit.xss.avoid-html-safe.avoid-html-safe"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 55,
                                        "endLine": 55,
                                        "snippet": "      s.html_safe? ? result.html_safe : result"
                                    }
                                }
                            ],
                            "message": "'html_safe()' does not make the supplied string safe. 'html_safe()' bypasses HTML escaping. If external data can reach here, this exposes your application to cross-site scripting (XSS) attacks. Ensure no external data reaches here.",
                            "ruleId": "ruby.rails.security.audit.xss.avoid-html-safe.avoid-html-safe"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_979_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2733_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3593_0.cpp",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5188_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_135_0.cc",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_564_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_778_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1385_1.go",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3719_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_416_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4601_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 26,
                                        "endLine": 26,
                                        "snippet": "        $ret = exec($cmd,$output);"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection.",
                            "ruleId": "php.lang.security.exec-use.exec-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 26,
                                        "endLine": 26,
                                        "snippet": "        $ret = exec($cmd,$output);"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.",
                            "ruleId": "php.lang.security.tainted-exec.tainted-exec"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_2110_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_802_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4969_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2374_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 231,
                                        "endLine": 231,
                                        "snippet": "     memset(&argument, 0, sizeof(argument));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_2412_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3810_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 5,
                                        "endLine": 5,
                                        "snippet": "    shell_exec(\"/usr/sbin/oo-restorer-wrapper.sh $uuid\");"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection.",
                            "ruleId": "php.lang.security.exec-use.exec-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_4923_0.phtml",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_789_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4129_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4115_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2053_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2228_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3795_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1408_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1110_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4261_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 84,
                                        "endLine": 84,
                                        "snippet": "\t\tmemset(rpath, 0, sizeof(rpath));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 110,
                                        "endLine": 110,
                                        "snippet": "\t\tmemset(ctrl->cwd, 0, sizeof(ctrl->cwd));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 148,
                                        "endLine": 148,
                                        "snippet": "\tmemset(&server, 0, sizeof(server));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_5373_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 42,
                                        "endLine": 42,
                                        "snippet": "\t\t$params = @unserialize( $params );"
                                    }
                                }
                            ],
                            "message": "Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution. Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).",
                            "ruleId": "php.lang.security.unserialize-use.unserialize-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_5753_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1139_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1015_0.go",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_810_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4512_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 55,
                                        "endLine": 55,
                                        "snippet": "      cp.exec(gitApp + \" add \" + files, gitExtra, done);"
                                    }
                                }
                            ],
                            "message": "Detected calls to child_process from a function argument `files`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
                            "ruleId": "javascript.lang.security.detect-child-process.detect-child-process"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 59,
                                        "endLine": 59,
                                        "snippet": "      cp.exec([gitApp, \"commit\", \"-m\", message].join(\" \"), gitExtra, done);"
                                    }
                                }
                            ],
                            "message": "Detected calls to child_process from a function argument `message`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
                            "ruleId": "javascript.lang.security.detect-child-process.detect-child-process"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 59,
                                        "endLine": 59,
                                        "snippet": "      cp.exec([gitApp, \"commit\", \"-m\", message].join(\" \"), gitExtra, done);"
                                    }
                                }
                            ],
                            "message": "Detected calls to child_process from a function argument `newVer`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
                            "ruleId": "javascript.lang.security.detect-child-process.detect-child-process"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 64,
                                        "endLine": 64,
                                        "snippet": "        [gitApp, \"tag\", \"-a\", tagName, \"-m\", message].join(\" \"),"
                                    }
                                }
                            ],
                            "message": "Detected calls to child_process from a function argument `message`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
                            "ruleId": "javascript.lang.security.detect-child-process.detect-child-process"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 64,
                                        "endLine": 64,
                                        "snippet": "        [gitApp, \"tag\", \"-a\", tagName, \"-m\", message].join(\" \"),"
                                    }
                                }
                            ],
                            "message": "Detected calls to child_process from a function argument `newVer`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
                            "ruleId": "javascript.lang.security.detect-child-process.detect-child-process"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 64,
                                        "endLine": 64,
                                        "snippet": "        [gitApp, \"tag\", \"-a\", tagName, \"-m\", message].join(\" \"),"
                                    }
                                }
                            ],
                            "message": "Detected calls to child_process from a function argument `tagName`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
                            "ruleId": "javascript.lang.security.detect-child-process.detect-child-process"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_838_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1141_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1251_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5426_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4976_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2957_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5764_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1264_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 258,
                                        "endLine": 258,
                                        "snippet": "\tmemset(&connect, 0, sizeof(connect));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_5873_0.rb",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 48,
                                        "endLine": 48,
                                        "snippet": "          self.headers['ETag'] ||= %(\"#{Digest::MD5.hexdigest(body)}\")"
                                    }
                                }
                            ],
                            "message": "Should not use md5 to generate hashes. md5 is proven to be vulnerable through the use of brute-force attacks. Could also result in collisions, leading to potential collision attacks. Use SHA256 or other hashing functions instead.",
                            "ruleId": "ruby.lang.security.weak-hashes-md5.weak-hashes-md5"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_1501_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4687_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1738_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3842_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3759_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2743_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_783_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 223,
                                        "endLine": 223,
                                        "snippet": "\tchild.exec(cmd, {"
                                    }
                                }
                            ],
                            "message": "Detected calls to child_process from a function argument `repo`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
                            "ruleId": "javascript.lang.security.detect-child-process.detect-child-process"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 89,
                                        "endLine": 89,
                                        "snippet": "\tthis.repos.create(path.join(organization, name), cb);"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 89,
                                        "endLine": 89,
                                        "snippet": "\tthis.repos.create(path.join(organization, name), cb);"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 152,
                                        "endLine": 152,
                                        "snippet": "\treturn path.join(this.workDir, organization, name);"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 152,
                                        "endLine": 152,
                                        "snippet": "\treturn path.join(this.workDir, organization, name);"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 167,
                                        "endLine": 167,
                                        "snippet": "\tvar dir = path.join(this.repoDir, organization, name);"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 167,
                                        "endLine": 167,
                                        "snippet": "\tvar dir = path.join(this.repoDir, organization, name);"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 221,
                                        "endLine": 221,
                                        "snippet": "\tvar cmd = ['git', 'pull', 'file://' + path.resolve(self.repoDir, repo.organization, repo.name), encodeURIComponent(repo.branch)].join(' ');"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 221,
                                        "endLine": 221,
                                        "snippet": "\tvar cmd = ['git', 'pull', 'file://' + path.resolve(self.repoDir, repo.organization, repo.name), encodeURIComponent(repo.branch)].join(' ');"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_2214_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1126_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 73,
                                        "endLine": 73,
                                        "snippet": "\t\t\t\t@unlink(\"{$g['tmp_path']}/passthrumac_gui\");"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 110,
                                        "endLine": 110,
                                        "snippet": "\t\t\t\t@unlink(\"{$g['tmp_path']}/{$uniqid}_tmp\");"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 129,
                                        "endLine": 129,
                                        "snippet": "\t\t@unlink(\"{$g['tmp_path']}/{$uniqid}_tmp\");"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 108,
                                        "endLine": 108,
                                        "snippet": "\t\t\t\tfile_put_contents(\"{$g['tmp_path']}/{$uniqid}_tmp\", $rules);"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 110,
                                        "endLine": 110,
                                        "snippet": "\t\t\t\t@unlink(\"{$g['tmp_path']}/{$uniqid}_tmp\");"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 127,
                                        "endLine": 127,
                                        "snippet": "\t\tfile_put_contents(\"{$g['tmp_path']}/{$uniqid}_tmp\", $rules);"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 129,
                                        "endLine": 129,
                                        "snippet": "\t\t@unlink(\"{$g['tmp_path']}/{$uniqid}_tmp\");"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_1709_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4682_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3706_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4176_0.go",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4672_0.cc",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4323_0.cpp",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3861_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_378_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 18,
                                        "endLine": 18,
                                        "snippet": "\t\t\tif (file_exists ('layouts/' . $_GET['layout'] . '.html')) {"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 19,
                                        "endLine": 19,
                                        "snippet": "\t\t\t\t$page->layout = file_get_contents ('layouts/' . $_GET['layout'] . '.html');"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 20,
                                        "endLine": 20,
                                        "snippet": "\t\t\t} elseif (file_exists ('layouts/' . $_GET['layout'] . '/' . $_GET['layout'] . '.html')) {"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 21,
                                        "endLine": 21,
                                        "snippet": "\t\t\t\t$page->layout = file_get_contents ('layouts/' . $_GET['layout'] . '/' . $_GET['layout'] . '.html');"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 26,
                                        "endLine": 26,
                                        "snippet": "\t\t$page->layout = str_replace ('</head>', '<style>' . strip_tags (file_get_contents ($_GET['css'])) . '</style></head>', $page->layout);"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 31,
                                        "endLine": 31,
                                        "snippet": "\t\t\tif (file_exists ('layouts/' . $_POST['layout'] . '.html')) {"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 32,
                                        "endLine": 32,
                                        "snippet": "\t\t\t\t$page->layout = file_get_contents ('layouts/' . $_POST['layout'] . '.html');"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 33,
                                        "endLine": 33,
                                        "snippet": "\t\t\t} elseif (file_exists ('layouts/' . $_POST['layout'] . '/' . $_POST['layout'] . '.html')) {"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 34,
                                        "endLine": 34,
                                        "snippet": "\t\t\t\t$page->layout = file_get_contents ('layouts/' . $_POST['layout'] . '/' . $_POST['layout'] . '.html');"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_5586_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4974_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3134_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4652_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_543_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4192_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 150,
                                        "endLine": 150,
                                        "snippet": "          obj = obj[j];"
                                    }
                                }
                            ],
                            "message": "Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.",
                            "ruleId": "javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_5237_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_808_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 173,
                                        "endLine": 173,
                                        "snippet": "\t\t\t\t\tif (!file_exists($dest_file)) {"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_3235_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4977_0.phtml",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1266_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1899_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_559_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5443_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 47,
                                        "endLine": 47,
                                        "snippet": "\t\t$lastline = exec($command, $output, $retval);"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection.",
                            "ruleId": "php.lang.security.exec-use.exec-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_5028_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5680_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_189_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4229_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_990_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3889_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_865_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 38,
                                        "endLine": 38,
                                        "snippet": "    var result = vm.runInContext(code, sandbox);"
                                    }
                                }
                            ],
                            "message": "Make sure that unverified user data can not reach vm.runInContext.",
                            "ruleId": "javascript.lang.security.audit.vm-injection.vm-runincontext-context-injection"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_4510_0.go",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 186,
                                        "endLine": 186,
                                        "snippet": "\t\t\tif _, err := io.Copy(outFile, tarReader); err != nil {"
                                    }
                                }
                            ],
                            "message": "Detected a possible denial-of-service via a zip bomb attack. By limiting the max bytes read, you can mitigate this attack. `io.CopyN()` can specify a size. Refer to https://bomb.codes/ to learn more about this attack and other ways to mitigate it.",
                            "ruleId": "go.lang.security.decompression_bomb.potential-dos-via-decompression-bomb"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 55,
                                        "endLine": 108,
                                        "snippet": "var Extractors = map[string]Extractor{\n\t\".tar.gz\": &TarGzExtractor{},\n\t\".tgz\":    &TarGzExtractor{},\n}\n\n// NewExtractor creates a new extractor matching the source file name\nfunc NewExtractor(source string) (Extractor, error) {\n\tfor suffix, extractor := range Extractors {\n\t\tif strings.HasSuffix(source, suffix) {\n\t\t\treturn extractor, nil"
                                    }
                                }
                            ],
                            "message": "Iteration over a possibly empty map `Extractors`. This is likely a bug or redundant code",
                            "ruleId": "trailofbits.go.iterate-over-empty-map.iterate-over-empty-map"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_3295_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 46,
                                        "endLine": 46,
                                        "snippet": "            memset(d + *x, value, n);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 53,
                                        "endLine": 53,
                                        "snippet": "            memset(d + *x, value, run);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 153,
                                        "endLine": 153,
                                        "snippet": "    memset(frame->data[0], 0, s->height * frame->linesize[0]);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 197,
                                        "endLine": 197,
                                        "snippet": "    memset(palette + npal, 0, AVPALETTE_SIZE - npal * 4);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_2857_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3518_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 39,
                                        "endLine": 39,
                                        "snippet": "\tmemset(dctx, 0, sizeof(*dctx));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_1885_0.rs",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2350_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 32,
                                        "endLine": 32,
                                        "snippet": "$sql=\"SELECT * FROM `\" . table_users . \"` where `user_login` = '\".$username.\"' AND `last_reset_request` = FROM_UNIXTIME('\".$n.\"') AND user_level!='Spammer'\";"
                                    }
                                }
                            ],
                            "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.",
                            "ruleId": "php.lang.security.injection.tainted-sql-string.tainted-sql-string"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 75,
                                        "endLine": 75,
                                        "snippet": "\t\t\t\t\t$db->query('UPDATE `' . table_users . \"` SET `user_pass` = '$saltedPass' WHERE `user_login` = '\".$user->user_login.\"'\");"
                                    }
                                }
                            ],
                            "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.",
                            "ruleId": "php.lang.security.injection.tainted-sql-string.tainted-sql-string"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 76,
                                        "endLine": 76,
                                        "snippet": "\t\t\t\t\t$db->query('UPDATE `' . table_users . '` SET `last_reset_request` = FROM_UNIXTIME('.time().') WHERE `user_login` = \"'.$user->user_login.'\"');"
                                    }
                                }
                            ],
                            "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.",
                            "ruleId": "php.lang.security.injection.tainted-sql-string.tainted-sql-string"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_3288_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 34,
                                        "endLine": 34,
                                        "snippet": "\tmemset (buf, 0, sizeof (buf)) ;"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_3606_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3292_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 119,
                                        "endLine": 119,
                                        "snippet": "\t\t\t\tunlink(str_replace(array(\"{wwwroot}\",\"{staticroot}\"),SITE_ROOT,$file_location));"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 144,
                                        "endLine": 144,
                                        "snippet": "\t\t\t\tunlink($local_file);"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 159,
                                        "endLine": 159,
                                        "snippet": "\t\t\t\t\tunlink($local_file);"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 198,
                                        "endLine": 198,
                                        "snippet": "\t\t\t\tunlink($local_file);"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 240,
                                        "endLine": 240,
                                        "snippet": "\t\t\t\t\tunlink($local_file);"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_5410_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 156,
                                        "endLine": 156,
                                        "snippet": "\t\tmemset(data + datalen, 0x00, enclen - datalen);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_4244_0.cpp",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1978_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3976_0.cc",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4371_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4662_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4594_0.cpp",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5357_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3561_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1845_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1737_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5664_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5149_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1346_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4733_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 279,
                                        "endLine": 279,
                                        "snippet": "\tmemset(inbuf, 0, 256);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 280,
                                        "endLine": 280,
                                        "snippet": "\tmemset(outbuf, 0, 256);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 309,
                                        "endLine": 309,
                                        "snippet": "\tmemset(mailbox->buf, 0, 256);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_5837_0.rb",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 6,
                                        "endLine": 240,
                                        "snippet": "class ApplicationController < ActionController::Base\n\n  before_filter :set_context\n  before_filter :clear_setting_cache\n  before_filter \"hook(:app_before_filter, self)\"\n  after_filter  \"hook(:app_after_filter,  self)\"\n\n  helper_method :current_user_session, :current_user, :can_signup?\n  helper_method :called_from_index_page?, :called_from_landing_page?\n  helper_method :klass"
                                    }
                                }
                            ],
                            "message": "Detected controller which does not enable cross-site request forgery protections using 'protect_from_forgery'. Add 'protect_from_forgery :with => :exception' to your controller class.",
                            "ruleId": "ruby.lang.security.missing-csrf-protection.missing-csrf-protection"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_2873_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2999_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4928_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4909_0.cc",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4262_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_409_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1468_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2480_1.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1966_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 273,
                                        "endLine": 273,
                                        "snippet": "      activeEl.parentNode.innerHTML += window.__SUB_SIDEBAR__;"
                                    }
                                }
                            ],
                            "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities",
                            "ruleId": "javascript.browser.security.insecure-document-method.insecure-document-method"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 76,
                                        "endLine": 76,
                                        "snippet": "          .filter(k => path.match(new RegExp('^' + k)))[0];"
                                    }
                                }
                            ],
                            "message": "RegExp() called with a `k` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",
                            "ruleId": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 222,
                                        "endLine": 222,
                                        "snippet": "      path.replace(new RegExp(`^/${local}`), '')"
                                    }
                                }
                            ],
                            "message": "RegExp() called with a `path` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",
                            "ruleId": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_4547_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3747_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3702_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3029_0.h",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4746_0.h",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1800_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3997_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2746_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5445_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 43,
                                        "endLine": 43,
                                        "snippet": "\t\t$lastline = exec($command, $output, $retval);"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection.",
                            "ruleId": "php.lang.security.exec-use.exec-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_3584_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1489_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 168,
                                        "endLine": 191,
                                        "snippet": "\t\t$sql = \"INSERT INTO %smembers \n\t\t    VALUES (NULL,\n\t\t        '$_POST[login]',\n\t\t        '$_POST[password]',\n\t\t        '$_POST[email]',\n\t\t        '$_POST[website]',\n\t\t        '$_POST[first_name]', \n\t\t        '$_POST[second_name]', \n\t\t        '$_POST[last_name]', \n\t\t        '$dob', "
                                    }
                                }
                            ],
                            "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.",
                            "ruleId": "php.lang.security.injection.tainted-sql-string.tainted-sql-string"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 152,
                                        "endLine": 152,
                                        "snippet": "\t\t\t$_POST['website'] = 'http://' . $_POST['website']; "
                                    }
                                }
                            ],
                            "message": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host.",
                            "ruleId": "php.lang.security.injection.tainted-url-host.tainted-url-host"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_2026_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_218_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 58,
                                        "endLine": 58,
                                        "snippet": "    memset(hdr, 0, sizeof(*hdr));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_4684_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3913_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1145_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_989_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5151_0.phtml",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3798_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2349_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 34,
                                        "endLine": 34,
                                        "snippet": "$sql=\"SELECT * FROM `\" . table_users . \"` where `user_login` = '\".$username.\"' AND `last_reset_request` = FROM_UNIXTIME('\".$n.\"') AND user_level!='Spammer'\";"
                                    }
                                }
                            ],
                            "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.",
                            "ruleId": "php.lang.security.injection.tainted-sql-string.tainted-sql-string"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 77,
                                        "endLine": 77,
                                        "snippet": "\t\t\t\t\t$db->query('UPDATE `' . table_users . \"` SET `user_pass` = '$saltedPass' WHERE `user_login` = '\".$user->user_login.\"'\");"
                                    }
                                }
                            ],
                            "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.",
                            "ruleId": "php.lang.security.injection.tainted-sql-string.tainted-sql-string"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 78,
                                        "endLine": 78,
                                        "snippet": "\t\t\t\t\t$db->query('UPDATE `' . table_users . '` SET `last_reset_request` = FROM_UNIXTIME('.time().') WHERE `user_login` = \"'.$user->user_login.'\"');"
                                    }
                                }
                            ],
                            "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.",
                            "ruleId": "php.lang.security.injection.tainted-sql-string.tainted-sql-string"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_1712_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 116,
                                        "endLine": 116,
                                        "snippet": "    $captcha_config = unserialize($_SESSION['_CAPTCHA']['config']);"
                                    }
                                }
                            ],
                            "message": "Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution. Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).",
                            "ruleId": "php.lang.security.unserialize-use.unserialize-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_591_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1756_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4502_0.h",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4175_0.java",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 97,
                                        "endLine": 97,
                                        "snippet": "            DocumentBuilder db = dbf.newDocumentBuilder();"
                                    }
                                }
                            ],
                            "message": "DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false.",
                            "ruleId": "java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_2003_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2277_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5596_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_784_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_957_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1488_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4152_0.cc",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3585_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4180_0.py",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 209,
                                        "endLine": 211,
                                        "snippet": "    response = flask.make_response(flask.send_file(\n        str(data_file),\n    ))"
                                    }
                                }
                            ],
                            "message": "Be careful with `flask.make_response()`. If this response is rendered onto a webpage, this could create a cross-site scripting (XSS) vulnerability. `flask.make_response()` will not autoescape HTML. If you are rendering HTML, write your HTML in a template file and use `flask.render_template()` which will take care of escaping. If you are returning data from an API, consider using `flask.jsonify()`.",
                            "ruleId": "python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_4016_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 40,
                                        "endLine": 40,
                                        "snippet": "      ? path.resolve(process.cwd(), options.skeleton)"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_1577_0.java",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 61,
                                        "endLine": 61,
                                        "snippet": "         DocumentBuilder dbuilder = factory.newDocumentBuilder();"
                                    }
                                }
                            ],
                            "message": "DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false.",
                            "ruleId": "java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_5444_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 47,
                                        "endLine": 47,
                                        "snippet": "\t\t$lastline = exec($command, $output, $retval);"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection.",
                            "ruleId": "php.lang.security.exec-use.exec-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_1464_0.phtml",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3403_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4952_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2917_0.go",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3422_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 124,
                                        "endLine": 124,
                                        "snippet": "    memset(out, 0, linesize * c->avctx->height);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 143,
                                        "endLine": 143,
                                        "snippet": "    memset(frame->data[1], 0, AVPALETTE_SIZE);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_4068_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 35,
                                        "endLine": 35,
                                        "snippet": "        $result_cmd = shell_exec($cmd);"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection.",
                            "ruleId": "php.lang.security.exec-use.exec-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_1129_0.cpp",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4471_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5394_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1929_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2906_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 166,
                                        "endLine": 166,
                                        "snippet": "\t\t\tmemset(&dummy, 0, sizeof(struct ktermios));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_1676_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 92,
                                        "endLine": 92,
                                        "snippet": "\t\t\t} elseif (is_dir($path . $file)) {"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 101,
                                        "endLine": 101,
                                        "snippet": "\t\t\t\t$ss = @stat($path . $file);"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 159,
                                        "endLine": 159,
                                        "snippet": "\t\t\t\t\tif (file_exists('../data/thumbs/'.$thumbLink)) {"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 169,
                                        "endLine": 169,
                                        "snippet": "\t\t\t\t\tif (file_exists('../'.$thumbLinkExternal)) {"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 185,
                                        "endLine": 185,
                                        "snippet": "\t\t\t\t$filePerms = substr(sprintf('%o', fileperms($path.$upload['name'])), -4);"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 186,
                                        "endLine": 186,
                                        "snippet": "\t\t\t\t$fileOwner = posix_getpwuid(fileowner($path.$upload['name']));"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_4010_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5862_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 80,
                                        "endLine": 80,
                                        "snippet": "    var re = new RegExp('[?][^#]*' + name + '=([^&#]*)'),"
                                    }
                                }
                            ],
                            "message": "RegExp() called with a `name` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",
                            "ruleId": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 67,
                                        "endLine": 67,
                                        "snippet": "                val = obj[i].toString().replace(\"\\n\", \" \");"
                                    }
                                }
                            ],
                            "message": "`obj[i].toString().replace` method will only replace the first occurrence when used with a string argument (\"\\n\"). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag.",
                            "ruleId": "javascript.lang.security.audit.incomplete-sanitization.incomplete-sanitization"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_848_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3815_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 132,
                                        "endLine": 132,
                                        "snippet": "    var re = new RegExp(\"([?|&])\" + param + \"=.*?(&|$)\",\"i\");"
                                    }
                                }
                            ],
                            "message": "RegExp() called with a `param` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",
                            "ruleId": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_958_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_604_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2443_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 58,
                                        "endLine": 58,
                                        "snippet": "    memset(options, 0, sizeof(options_t));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_719_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 96,
                                        "endLine": 96,
                                        "snippet": "        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);"
                                    }
                                }
                            ],
                            "message": "SSL verification is disabled but should not be (currently CURLOPT_SSL_VERIFYPEER= false)",
                            "ruleId": "php.lang.security.curl-ssl-verifypeer-off.curl-ssl-verifypeer-off"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_2319_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1347_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1460_0.cpp",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1465_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2470_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 25,
                                        "endLine": 25,
                                        "snippet": "      `npm search ${args.join(\" \").replace(/\\n/g, \" \")} -json -l`,"
                                    }
                                }
                            ],
                            "message": "Detected calls to child_process from a function argument `args`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
                            "ruleId": "javascript.lang.security.detect-child-process.detect-child-process"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_5489_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3998_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5148_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_77_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2304_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 124,
                                        "endLine": 124,
                                        "snippet": "\tmemset(info, 0, sizeof(*info));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_4657_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2310_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2534_0.cc",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2305_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5324_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1691_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3699_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5321_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3330_0.h",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2442_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5290_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 108,
                                        "endLine": 108,
                                        "snippet": "                    unlink($filename);"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_311_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 48,
                                        "endLine": 48,
                                        "snippet": "if (@file_exists ($root . $_POST['path'] . '/' . $_FILES['file']['name'])) {"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 58,
                                        "endLine": 58,
                                        "snippet": "\t@chmod ($root . $_POST['path'] . '/' . $_FILES['file']['name'], 0666);"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_5654_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4482_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4219_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2481_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 57,
                                        "endLine": 57,
                                        "snippet": "      @unlink($args->dest);"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_810_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1043_0.h",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3738_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_838_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3580_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5706_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4544_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1573_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4651_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_29_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3402_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4729_0.h",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5407_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1142_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2271_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_662_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5150_0.phtml",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2849_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5621_0.h",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 83,
                                        "endLine": 83,
                                        "snippet": "\tmemset(scm, 0, sizeof(*scm));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_4136_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5425_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_610_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4930_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3838_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 98,
                                        "endLine": 98,
                                        "snippet": "\tmemset(addr, 0, sizeof(*addr));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_4582_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1226_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1773_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 165,
                                        "endLine": 165,
                                        "snippet": "\tmemset(ef, 0, sizeof(struct exfat));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 193,
                                        "endLine": 193,
                                        "snippet": "\tmemset(ef->sb, 0, sizeof(struct exfat_super_block));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 225,
                                        "endLine": 225,
                                        "snippet": "\tmemset(ef->zero_cluster, 0, CLUSTER_SIZE(*ef->sb));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 273,
                                        "endLine": 273,
                                        "snippet": "\tmemset(ef->root, 0, sizeof(struct exfat_node));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_5267_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 321,
                                        "endLine": 321,
                                        "snippet": "\tmemset(&cap, 0, sizeof(cap));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_3257_0.cxx",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4819_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 176,
                                        "endLine": 176,
                                        "snippet": "\tmemset(p14, '\\0', 14);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 177,
                                        "endLine": 177,
                                        "snippet": "\tmemset(p16, '\\0', 16);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 178,
                                        "endLine": 178,
                                        "snippet": "\tmemset(p21, '\\0', 21);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 225,
                                        "endLine": 225,
                                        "snippet": "\tmemset(p16, '\\0', 16);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 226,
                                        "endLine": 226,
                                        "snippet": "\tmemset(p21, '\\0', 21);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_3170_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 374,
                                        "endLine": 374,
                                        "snippet": "\tmemset (attr, '\\0', sizeof (MAPI_Attr));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_5602_0.h",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3707_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4679_0.cc",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3742_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 38,
                                        "endLine": 38,
                                        "snippet": "\t        unlink($autosetup_file);"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_543_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4029_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5093_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 204,
                                        "endLine": 204,
                                        "snippet": "\tmemset((void *) &saddr, 0, sizeof(saddr));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 278,
                                        "endLine": 278,
                                        "snippet": "\tmemset((void *) &saddr, 0, sizeof(saddr));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 369,
                                        "endLine": 369,
                                        "snippet": "\tmemset(&addr, 0, sizeof(addr));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_971_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4421_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 26,
                                        "endLine": 26,
                                        "snippet": "\tmemset(local_addr, 0, sizeof(fastd_peer_address_t));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_1977_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5427_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3414_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_193_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3421_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 124,
                                        "endLine": 124,
                                        "snippet": "    memset(out, 0, linesize * c->avctx->height);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 143,
                                        "endLine": 143,
                                        "snippet": "    memset(frame->data[1], 0, AVPALETTE_SIZE);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_2494_1.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4848_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3806_0.rb",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 1,
                                        "endLine": 8,
                                        "snippet": "class ApplicationController < ActionController::Base\n  include Console::Rescue\n\n  protect_from_forgery\n\n  protected\n    def handle_unverified_request\n      raise Console::AccessDenied, \"Request authenticity token does not match session #{session.inspect}\""
                                    }
                                }
                            ],
                            "message": "Detected controller which does not enable cross-site request forgery protections using 'protect_from_forgery'. Add 'protect_from_forgery :with => :exception' to your controller class.",
                            "ruleId": "ruby.lang.security.missing-csrf-protection.missing-csrf-protection"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_2905_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 166,
                                        "endLine": 166,
                                        "snippet": "\t\t\tmemset(&dummy, 0, sizeof(struct ktermios));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_3236_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3126_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4560_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4233_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 44,
                                        "endLine": 44,
                                        "snippet": "    memset(sbody, 0, size);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 66,
                                        "endLine": 66,
                                        "snippet": "    memset(sbody, 0, size);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_5677_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 252,
                                        "endLine": 252,
                                        "snippet": "\tmemset(&raw_data[size - sizeof(u64)], 0, sizeof(u64));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_1914_0.go",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4639_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3594_0.cpp",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1514_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4460_0.py",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 176,
                                        "endLine": 176,
                                        "snippet": "            tree = etree.parse(xmlf, parser=parser2)"
                                    }
                                }
                            ],
                            "message": "The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and \"XML bombs\" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`.",
                            "ruleId": "python.lang.security.use-defused-xml-parse.use-defused-xml-parse"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_3569_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4130_0.h",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2299_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_533_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 27,
                                        "endLine": 27,
                                        "snippet": "    var nextAbs = path.join(cwd, next)"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 27,
                                        "endLine": 27,
                                        "snippet": "    var nextAbs = path.join(cwd, next)"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 39,
                                        "endLine": 39,
                                        "snippet": "          if (!ignore(path.join(cwd, next, files[i]))) queue.push(path.join(next, files[i]))"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 39,
                                        "endLine": 39,
                                        "snippet": "          if (!ignore(path.join(cwd, next, files[i]))) queue.push(path.join(next, files[i]))"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 39,
                                        "endLine": 39,
                                        "snippet": "          if (!ignore(path.join(cwd, next, files[i]))) queue.push(path.join(next, files[i]))"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 39,
                                        "endLine": 39,
                                        "snippet": "          if (!ignore(path.join(cwd, next, files[i]))) queue.push(path.join(next, files[i]))"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 39,
                                        "endLine": 39,
                                        "snippet": "          if (!ignore(path.join(cwd, next, files[i]))) queue.push(path.join(next, files[i]))"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 89,
                                        "endLine": 89,
                                        "snippet": "    xfs.readlink(path.join(cwd, filename), function (err, linkname) {"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 141,
                                        "endLine": 141,
                                        "snippet": "    var rs = mapStream(xfs.createReadStream(path.join(cwd, filename)), header)"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 238,
                                        "endLine": 238,
                                        "snippet": "    var name = path.join(cwd, path.join('/', header.name))"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 238,
                                        "endLine": 238,
                                        "snippet": "    var name = path.join(cwd, path.join('/', header.name))"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 264,
                                        "endLine": 264,
                                        "snippet": "        var srcpath = path.resolve(cwd, header.linkname)"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 300,
                                        "endLine": 300,
                                        "snippet": "    validate(xfs, dir, path.join(cwd, '.'), function (err, valid) {"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 332,
                                        "endLine": 332,
                                        "snippet": "    if (err || st.isDirectory()) return validate(fs, path.join(name, '..'), root, cb)"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_64_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 17,
                                        "endLine": 17,
                                        "snippet": "    exec ($cmd.\" \".$v_user.\" json\", $output, $return_var);"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection.",
                            "ruleId": "php.lang.security.exec-use.exec-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 47,
                                        "endLine": 47,
                                        "snippet": "        exec ($cmd.\" \".$v_user.\" json\", $output, $return_var);"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection.",
                            "ruleId": "php.lang.security.exec-use.exec-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 57,
                                        "endLine": 57,
                                        "snippet": "                exec ($cmd.\" \".$v_user.\" \".$v_password, $output, $return_var);"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection.",
                            "ruleId": "php.lang.security.exec-use.exec-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 58,
                                        "endLine": 58,
                                        "snippet": "                unlink($v_password);"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_2229_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5265_0.cpp",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2794_0.h",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_708_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1101_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4350_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4958_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2313_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 94,
                                        "endLine": 94,
                                        "snippet": "\t\tmemset(ids, 0, sizeof(ids));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 142,
                                        "endLine": 142,
                                        "snippet": "\tmemset(ids, 0, sizeof(ids));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 233,
                                        "endLine": 233,
                                        "snippet": "\tmemset(&s_in, 0, sizeof(s_in));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 259,
                                        "endLine": 259,
                                        "snippet": "\tmemset(&s_in, 0, sizeof(s_in));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_3605_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2025_0.rb",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 26,
                                        "endLine": 26,
                                        "snippet": "         attribute_value = '{MD5}' + Base64.encode64(Digest::MD5.digest(str)).chomp! "
                                    }
                                }
                            ],
                            "message": "Should not use md5 to generate hashes. md5 is proven to be vulnerable through the use of brute-force attacks. Could also result in collisions, leading to potential collision attacks. Use SHA256 or other hashing functions instead.",
                            "ruleId": "ruby.lang.security.weak-hashes-md5.weak-hashes-md5"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 28,
                                        "endLine": 28,
                                        "snippet": "         attribute_value = '{SHA}' + Base64.encode64(Digest::SHA1.digest(str)).chomp! "
                                    }
                                }
                            ],
                            "message": "Should not use SHA1 to generate hashes. There is a proven SHA1 hash collision by Google, which could lead to vulnerabilities. Use SHA256, SHA3 or other hashing functions instead.",
                            "ruleId": "ruby.lang.security.weak-hashes-sha1.weak-hashes-sha1"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 31,
                                        "endLine": 31,
                                        "snippet": "         attribute_value = '{SSHA}' + Base64.encode64(Digest::SHA1.digest(str + salt) + salt).chomp!"
                                    }
                                }
                            ],
                            "message": "Should not use SHA1 to generate hashes. There is a proven SHA1 hash collision by Google, which could lead to vulnerabilities. Use SHA256, SHA3 or other hashing functions instead.",
                            "ruleId": "ruby.lang.security.weak-hashes-sha1.weak-hashes-sha1"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_4965_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3809_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1159_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 63,
                                        "endLine": 63,
                                        "snippet": "\t\tunlink($folder.'/'.$file);"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 63,
                                        "endLine": 63,
                                        "snippet": "\t\tunlink($folder.'/'.$file);"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_199_0.cpp",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2333_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_646_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4548_0.java",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 24,
                                        "endLine": 28,
                                        "snippet": "    public void addViolation(String msg) {\n        violationOccurred = true;\n        context.buildConstraintViolationWithTemplate(msg)\n            .addConstraintViolation();\n    }"
                                    }
                                }
                            ],
                            "message": "An expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation.",
                            "ruleId": "java.lang.security.audit.el-injection.el-injection"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_5374_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 42,
                                        "endLine": 42,
                                        "snippet": "\t\t$params = @unserialize( $params );"
                                    }
                                }
                            ],
                            "message": "Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution. Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).",
                            "ruleId": "php.lang.security.unserialize-use.unserialize-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_2196_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1431_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3540_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 39,
                                        "endLine": 39,
                                        "snippet": "\tmemset(socket_client_hash, 0, sizeof(socket_client_hash));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_5159_0.phtml",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_337_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 95,
                                        "endLine": 95,
                                        "snippet": "\t\t\t\t@unlink($tmpfilePath);"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 145,
                                        "endLine": 145,
                                        "snippet": "\t\t\t\t@unlink($tmpName);"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_88_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4357_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 18,
                                        "endLine": 18,
                                        "snippet": "            if (/\\d+/.test(element.textContent)) element.outerHTML = element.textContent;"
                                    }
                                }
                            ],
                            "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities",
                            "ruleId": "javascript.browser.security.insecure-document-method.insecure-document-method"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_4566_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1394_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 51,
                                        "endLine": 51,
                                        "snippet": "\tmemset(vec, 0, nr);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 67,
                                        "endLine": 67,
                                        "snippet": "\t\tmemset(vec, 1, nr);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 74,
                                        "endLine": 74,
                                        "snippet": "\t\tmemset(vec, 1, nr);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_2626_0.java",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 42,
                                        "endLine": 42,
                                        "snippet": "\t@RequestMapping(\"/module/htmlformentry/htmlFormFromFile.form\")"
                                    }
                                }
                            ],
                            "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                            "ruleId": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 72,
                                        "endLine": 72,
                                        "snippet": "\t\t\t\t\tf = new File(filePath);"
                                    }
                                }
                            ],
                            "message": "Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.",
                            "ruleId": "java.spring.security.injection.tainted-file-path.tainted-file-path"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 82,
                                        "endLine": 82,
                                        "snippet": "\t\t\t\tIOUtils.copy(new FileInputStream(f), writer, \"UTF-8\");"
                                    }
                                }
                            ],
                            "message": "Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.",
                            "ruleId": "java.spring.security.injection.tainted-file-path.tainted-file-path"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_3607_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4438_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2230_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2408_0.h",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3346_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5737_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1146_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 89,
                                        "endLine": 89,
                                        "snippet": "\t\t\techo \"\t<td valign='top' class='\".$row_style[$c].\" tr_link_void' style='width: 40%; max-width: 60px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;'><a href='\".escape($row['url_address']).\"' target='_blank'>\".str_replace(\"http://\", \"\", str_replace(\"https://\", \"\", escape($row['url_address']))).\"</a>&nbsp;</td>\\n\";"
                                    }
                                }
                            ],
                            "message": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host.",
                            "ruleId": "php.lang.security.injection.tainted-url-host.tainted-url-host"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_1905_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5092_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 173,
                                        "endLine": 173,
                                        "snippet": "\tmemset((void *) &saddr, 0, sizeof(saddr));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 239,
                                        "endLine": 239,
                                        "snippet": "\tmemset((void *) &saddr, 0, sizeof(saddr));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 330,
                                        "endLine": 330,
                                        "snippet": "\tmemset(&addr, 0, sizeof(addr));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_2045_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 111,
                                        "endLine": 111,
                                        "snippet": "  memset(scratch, 0, DIS_BUFSIZ+1);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_3683_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_218_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 58,
                                        "endLine": 58,
                                        "snippet": "    memset(hdr, 0, sizeof(*hdr));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_4879_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3395_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4579_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 201,
                                        "endLine": 201,
                                        "snippet": "                @unlink($fullPath);"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_3218_0.cpp",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2169_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3587_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 131,
                                        "endLine": 131,
                                        "snippet": "            if (file_exists($folder.\"/\".$_POST[\"extension\"].\"/locale/\".$config->locale.\".mo\"))"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_3617_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5266_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5584_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 79,
                                        "endLine": 79,
                                        "snippet": "            exec ($command, $output = array (), $res);"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection.",
                            "ruleId": "php.lang.security.exec-use.exec-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 86,
                                        "endLine": 86,
                                        "snippet": "            exec ($command, $output = array (), $res);"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection.",
                            "ruleId": "php.lang.security.exec-use.exec-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 97,
                                        "endLine": 97,
                                        "snippet": "            exec ($command, $output = array (), $res);"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection.",
                            "ruleId": "php.lang.security.exec-use.exec-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 160,
                                        "endLine": 160,
                                        "snippet": "            exec(\"mv $dir/* $dest\", $output, $res);"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection.",
                            "ruleId": "php.lang.security.exec-use.exec-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 161,
                                        "endLine": 161,
                                        "snippet": "            exec(\"rm -Rf $dir*\");"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection.",
                            "ruleId": "php.lang.security.exec-use.exec-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 160,
                                        "endLine": 160,
                                        "snippet": "            exec(\"mv $dir/* $dest\", $output, $res);"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.",
                            "ruleId": "php.lang.security.tainted-exec.tainted-exec"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_1766_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 136,
                                        "endLine": 136,
                                        "snippet": "\t\tmemset(&di, 0, sizeof(di));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 188,
                                        "endLine": 188,
                                        "snippet": "\t\tmemset(&ni, 0, sizeof(ni));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_5446_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 47,
                                        "endLine": 47,
                                        "snippet": "\t\t$lastline = exec($command, $output, $retval);"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection.",
                            "ruleId": "php.lang.security.exec-use.exec-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_2193_0.h",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2113_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 52,
                                        "endLine": 52,
                                        "snippet": "  unlink($tmp);"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_1014_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 21,
                                        "endLine": 21,
                                        "snippet": "\tmemset(nfunc, 0, sizeof(nfunc));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 46,
                                        "endLine": 46,
                                        "snippet": "\tmemset(nfunc, 0, sizeof(nfunc));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 75,
                                        "endLine": 75,
                                        "snippet": "\tmemset(nfunc, 0, sizeof(nfunc));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 105,
                                        "endLine": 105,
                                        "snippet": "\tmemset(nfunc, 0, sizeof(nfunc));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_5284_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5012_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2368_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_292_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4834_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1400_0.rb",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 26,
                                        "endLine": 26,
                                        "snippet": "      redirect_to params[:ref]"
                                    }
                                }
                            ],
                            "message": "When a redirect uses user input, a malicious user can spoof a website under a trusted URL or access restricted parts of a site. When using user-supplied values, sanitize the value before using it for the redirect.",
                            "ruleId": "ruby.rails.security.audit.xss.avoid-redirect.avoid-redirect"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 26,
                                        "endLine": 26,
                                        "snippet": "      redirect_to params[:ref]"
                                    }
                                }
                            ],
                            "message": "Found potentially unsafe handling of redirect behavior params[:ref]. Do not pass `params` to `redirect_to` without the `:only_path => true` hash value.",
                            "ruleId": "ruby.rails.security.brakeman.check-redirect-to.check-redirect-to"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_4488_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3682_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_34_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1642_0.h",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2188_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2909_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5060_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 62,
                                        "endLine": 62,
                                        "snippet": "\tmemset(dte_facs->called_ae, '\\0', sizeof(dte_facs->called_ae));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 63,
                                        "endLine": 63,
                                        "snippet": "\tmemset(dte_facs->calling_ae, '\\0', sizeof(dte_facs->calling_ae));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 278,
                                        "endLine": 278,
                                        "snippet": "\tmemset(&theirs, 0, sizeof(theirs));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_3738_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2921_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3939_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4482_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2481_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 50,
                                        "endLine": 50,
                                        "snippet": "      @unlink($args->dest);"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_647_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5290_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 111,
                                        "endLine": 111,
                                        "snippet": "                    unlink($filename);"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_5407_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4563_0.rb",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 87,
                                        "endLine": 87,
                                        "snippet": "        content_tag(\"script\", javascript_cdata_section(content), html_options)"
                                    }
                                }
                            ],
                            "message": "'content_tag()' bypasses HTML escaping for some portion of the content. If external data can reach here, this exposes your application to cross-site scripting (XSS) attacks. Ensure no external data reaches here. If you must do this, create your HTML manually and use 'html_safe'. Ensure no external data enters the HTML-safe string!",
                            "ruleId": "ruby.rails.security.audit.xss.avoid-content-tag.avoid-content-tag"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 34,
                                        "endLine": 34,
                                        "snippet": "        javascript.html_safe? ? result.html_safe : result"
                                    }
                                }
                            ],
                            "message": "'html_safe()' does not make the supplied string safe. 'html_safe()' bypasses HTML escaping. If external data can reach here, this exposes your application to cross-site scripting (XSS) attacks. Ensure no external data reaches here.",
                            "ruleId": "ruby.rails.security.audit.xss.avoid-html-safe.avoid-html-safe"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 91,
                                        "endLine": 91,
                                        "snippet": "        \"\\n//#{cdata_section(\"\\n#{content}\\n//\")}\\n\".html_safe"
                                    }
                                }
                            ],
                            "message": "'html_safe()' does not make the supplied string safe. 'html_safe()' bypasses HTML escaping. If external data can reach here, this exposes your application to cross-site scripting (XSS) attacks. Ensure no external data reaches here.",
                            "ruleId": "ruby.rails.security.audit.xss.avoid-html-safe.avoid-html-safe"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_625_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_641_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 105,
                                        "endLine": 105,
                                        "snippet": "    memset(&event_mgr, 0, sizeof(opj_event_mgr_t));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 117,
                                        "endLine": 117,
                                        "snippet": "    memset(&parameters, 0, sizeof(mj2_dparameters_t));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_5706_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_423_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_28_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4136_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4165_0.cc",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5425_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1529_0.h",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2849_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_710_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2492_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_662_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1142_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5042_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2277_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_988_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3990_0.go",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4009_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_609_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5394_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3237_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4923_0.phtml",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4216_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4068_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 35,
                                        "endLine": 35,
                                        "snippet": "        $result_cmd = shell_exec(escapeshellcmd($cmd));"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection.",
                            "ruleId": "php.lang.security.exec-use.exec-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_1129_0.cpp",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5444_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 43,
                                        "endLine": 43,
                                        "snippet": "\t\t$lastline = exec($command, $output, $retval);"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection.",
                            "ruleId": "php.lang.security.exec-use.exec-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_180_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3585_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5020_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1488_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3570_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5726_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 73,
                                        "endLine": 73,
                                        "snippet": "\t\tmemset(str, ' ', sizeof(str));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_1999_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 9,
                                        "endLine": 9,
                                        "snippet": "      command,"
                                    }
                                }
                            ],
                            "message": "Detected calls to child_process from a function argument `command`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
                            "ruleId": "javascript.lang.security.detect-child-process.detect-child-process"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_4442_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_913_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3394_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4910_0.cc",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4627_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 56,
                                        "endLine": 56,
                                        "snippet": "    const filePath = path.join(fullPath, f);"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 56,
                                        "endLine": 56,
                                        "snippet": "    const filePath = path.join(fullPath, f);"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 101,
                                        "endLine": 101,
                                        "snippet": "    const output = fs.createWriteStream(path.resolve(cwd, options.destination));"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 101,
                                        "endLine": 101,
                                        "snippet": "    const output = fs.createWriteStream(path.resolve(cwd, options.destination));"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 110,
                                        "endLine": 110,
                                        "snippet": "      const fullPath = path.resolve(cwd, source);"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_4010_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1676_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 91,
                                        "endLine": 91,
                                        "snippet": "\t\t\t} elseif (is_dir($path . $file)) {"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 100,
                                        "endLine": 100,
                                        "snippet": "\t\t\t\t$ss = @stat($path . $file);"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 158,
                                        "endLine": 158,
                                        "snippet": "\t\t\t\t\tif (file_exists('../data/thumbs/'.$thumbLink)) {"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 168,
                                        "endLine": 168,
                                        "snippet": "\t\t\t\t\tif (file_exists('../'.$thumbLinkExternal)) {"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 184,
                                        "endLine": 184,
                                        "snippet": "\t\t\t\t$filePerms = substr(sprintf('%o', fileperms($path.$upload['name'])), -4);"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 185,
                                        "endLine": 185,
                                        "snippet": "\t\t\t\t$fileOwner = posix_getpwuid(fileowner($path.$upload['name']));"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_2068_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3404_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5148_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2167_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1502_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1347_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1460_0.cpp",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2892_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_584_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1795_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_293_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1921_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1763_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 355,
                                        "endLine": 355,
                                        "snippet": "\tmemset(&key->payload, KEY_DESTROY, sizeof(key->payload));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_1007_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4874_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 85,
                                        "endLine": 85,
                                        "snippet": "\t\tsendFile.apply( response, [ path.join( configuration.directory, locale + configuration.extension ) ] );"
                                    }
                                }
                            ],
                            "message": "Possible writing outside of the destination, make sure that the target path is nested in the intended destination",
                            "ruleId": "javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 117,
                                        "endLine": 117,
                                        "snippet": "\t\tresponse.send( result );"
                                    }
                                }
                            ],
                            "message": "Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML.",
                            "ruleId": "javascript.express.security.audit.xss.direct-response-write.direct-response-write"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 85,
                                        "endLine": 85,
                                        "snippet": "\t\tsendFile.apply( response, [ path.join( configuration.directory, locale + configuration.extension ) ] );"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_1540_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_27_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1159_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 63,
                                        "endLine": 63,
                                        "snippet": "\t\tunlink($folder.'/'.$file);"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 63,
                                        "endLine": 63,
                                        "snippet": "\t\tunlink($folder.'/'.$file);"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_3638_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5859_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 70,
                                        "endLine": 70,
                                        "snippet": "    child_process.exec(args.join(' '), callback)"
                                    }
                                }
                            ],
                            "message": "Detected calls to child_process from a function argument `msg`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
                            "ruleId": "javascript.lang.security.detect-child-process.detect-child-process"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_5268_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1710_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1991_1.ts",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4120_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 134,
                                        "endLine": 134,
                                        "snippet": "\t\t\tres.redirect(url + '#nodebb-comments');"
                                    }
                                }
                            ],
                            "message": "The application redirects to a URL specified by user-supplied input `req` that is not validated. This could redirect users to malicious locations. Consider using an allow-list approach to validate URLs, or warn users they are being redirected to a third-party website.",
                            "ruleId": "javascript.express.security.audit.express-open-redirect.express-open-redirect"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_1772_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4353_0.java",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 44,
                                        "endLine": 44,
                                        "snippet": "  private DefaultHttpClient defaultHttpClient = new DefaultHttpClient();"
                                    }
                                }
                            ],
                            "message": "DefaultHttpClient is deprecated. Further, it does not support connections using TLS1.2, which makes using DefaultHttpClient a security hazard. Use HttpClientBuilder instead.",
                            "ruleId": "java.lang.security.audit.crypto.ssl.defaulthttpclient-is-deprecated.defaulthttpclient-is-deprecated"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_5739_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4566_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1637_0.rb",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 2,
                                        "endLine": 26,
                                        "snippet": "  class ApplicationController < ActionController::Base\n    protect_from_forgery\n    \n    include ApplicationHelper\n\n    private\n\n    def current_ability\n      @current_ability ||= Ability.new(current_user)\n    end"
                                    }
                                }
                            ],
                            "message": "Detected controller which does not enable cross-site request forgery protections using 'protect_from_forgery'. Add 'protect_from_forgery :with => :exception' to your controller class.",
                            "ruleId": "ruby.lang.security.missing-csrf-protection.missing-csrf-protection"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_4977_0.phtml",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5095_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4330_0.go",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4730_0.h",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5374_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 42,
                                        "endLine": 42,
                                        "snippet": "\t\t$params = @unserialize( $params );"
                                    }
                                }
                            ],
                            "message": "Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution. Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).",
                            "ruleId": "php.lang.security.unserialize-use.unserialize-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_3746_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1146_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_206_0.h",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2230_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3221_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4389_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3962_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 121,
                                        "endLine": 121,
                                        "snippet": "\tmemset(cmac_key, 0, sizeof(cmac_key));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 122,
                                        "endLine": 122,
                                        "snippet": "\tmemset(cipher_key, 0, sizeof(cipher_key));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 123,
                                        "endLine": 123,
                                        "snippet": "\tmemset(iv, 0, sizeof(iv));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_2368_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_472_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1807_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 69,
                                        "endLine": 69,
                                        "snippet": "\tmemset(&newrange.min_addr, 0, sizeof(newrange.min_addr));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 70,
                                        "endLine": 70,
                                        "snippet": "\tmemset(&newrange.max_addr, 0, sizeof(newrange.max_addr));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_3770_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5446_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 43,
                                        "endLine": 43,
                                        "snippet": "\t\t$lastline = exec($command, $output, $retval);"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection.",
                            "ruleId": "php.lang.security.exec-use.exec-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_2113_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 52,
                                        "endLine": 52,
                                        "snippet": "  unlink($tmp);"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_3587_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 131,
                                        "endLine": 131,
                                        "snippet": "            if (file_exists($folder.\"/\".$_POST[\"extension\"].\"/locale/\".$config->locale.\".mo\"))"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_5584_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 77,
                                        "endLine": 77,
                                        "snippet": "            exec ($command, $output = array (), $res);"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection.",
                            "ruleId": "php.lang.security.exec-use.exec-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 84,
                                        "endLine": 84,
                                        "snippet": "            exec ($command, $output = array (), $res);"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection.",
                            "ruleId": "php.lang.security.exec-use.exec-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 95,
                                        "endLine": 95,
                                        "snippet": "            exec ($command, $output = array (), $res);"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection.",
                            "ruleId": "php.lang.security.exec-use.exec-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 158,
                                        "endLine": 158,
                                        "snippet": "            exec(\"mv $dir/* $dest\", $output, $res);"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection.",
                            "ruleId": "php.lang.security.exec-use.exec-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 159,
                                        "endLine": 159,
                                        "snippet": "            exec(\"rm -Rf $dir*\");"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection.",
                            "ruleId": "php.lang.security.exec-use.exec-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 158,
                                        "endLine": 158,
                                        "snippet": "            exec(\"mv $dir/* $dest\", $output, $res);"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.",
                            "ruleId": "php.lang.security.tainted-exec.tainted-exec"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_3218_0.cpp",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_440_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4579_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 201,
                                        "endLine": 201,
                                        "snippet": "                @unlink($fullPath);"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_5334_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4618_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 55,
                                        "endLine": 55,
                                        "snippet": "      cp.exec(gitApp + \" add \" + files, gitExtra, done);"
                                    }
                                }
                            ],
                            "message": "Detected calls to child_process from a function argument `files`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
                            "ruleId": "javascript.lang.security.detect-child-process.detect-child-process"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 59,
                                        "endLine": 59,
                                        "snippet": "      cp.exec([gitApp, \"commit\", \"-m\", message].join(\" \"), gitExtra, done);"
                                    }
                                }
                            ],
                            "message": "Detected calls to child_process from a function argument `message`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
                            "ruleId": "javascript.lang.security.detect-child-process.detect-child-process"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 59,
                                        "endLine": 59,
                                        "snippet": "      cp.exec([gitApp, \"commit\", \"-m\", message].join(\" \"), gitExtra, done);"
                                    }
                                }
                            ],
                            "message": "Detected calls to child_process from a function argument `newVer`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
                            "ruleId": "javascript.lang.security.detect-child-process.detect-child-process"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 64,
                                        "endLine": 64,
                                        "snippet": "        [gitApp, \"tag\", \"-a\", tagName, \"-m\", message].join(\" \"),"
                                    }
                                }
                            ],
                            "message": "Detected calls to child_process from a function argument `message`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
                            "ruleId": "javascript.lang.security.detect-child-process.detect-child-process"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 64,
                                        "endLine": 64,
                                        "snippet": "        [gitApp, \"tag\", \"-a\", tagName, \"-m\", message].join(\" \"),"
                                    }
                                }
                            ],
                            "message": "Detected calls to child_process from a function argument `newVer`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
                            "ruleId": "javascript.lang.security.detect-child-process.detect-child-process"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 64,
                                        "endLine": 64,
                                        "snippet": "        [gitApp, \"tag\", \"-a\", tagName, \"-m\", message].join(\" \"),"
                                    }
                                }
                            ],
                            "message": "Detected calls to child_process from a function argument `tagName`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
                            "ruleId": "javascript.lang.security.detect-child-process.detect-child-process"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_1690_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3395_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4029_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2314_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 92,
                                        "endLine": 92,
                                        "snippet": "\tfree(pktbuf);"
                                    }
                                }
                            ],
                            "message": "Variable 'pktbuf' was freed twice. This can lead to undefined behavior.",
                            "ruleId": "c.lang.security.double-free.double-free"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 351,
                                        "endLine": 351,
                                        "snippet": "\t\tmemset(ptr, 0, sizeof(*ti));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_2168_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2956_0.h",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_441_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3707_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3742_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 38,
                                        "endLine": 38,
                                        "snippet": "\t        unlink($autosetup_file);"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_2094_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3257_0.cxx",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4445_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1226_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4582_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3814_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 132,
                                        "endLine": 132,
                                        "snippet": "    var re = new RegExp(\"([?|&])\" + param + \"=.*?(&|$)\",\"i\");"
                                    }
                                }
                            ],
                            "message": "RegExp() called with a `param` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",
                            "ruleId": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_3236_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4848_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5427_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4862_0.h",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_447_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1381_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_697_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 123,
                                        "endLine": 123,
                                        "snippet": "  args.app.use(sessionModule({secret: exports.secret, store: args.app.sessionStore, resave: true, saveUninitialized: true, name: 'express_sid', proxy: true, cookie: { secure: !!settings.ssl }}));"
                                    }
                                }
                            ],
                            "message": "Default session middleware settings: `httpOnly` not set. It ensures the cookie is sent only over HTTP(S), not client JavaScript, helping to protect against cross-site scripting attacks.",
                            "ruleId": "javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-httponly"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 123,
                                        "endLine": 123,
                                        "snippet": "  args.app.use(sessionModule({secret: exports.secret, store: args.app.sessionStore, resave: true, saveUninitialized: true, name: 'express_sid', proxy: true, cookie: { secure: !!settings.ssl }}));"
                                    }
                                }
                            ],
                            "message": "Default session middleware settings: `domain` not set. It indicates the domain of the cookie; use it to compare against the domain of the server in which the URL is being requested. If they match, then check the path attribute next.",
                            "ruleId": "javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-domain"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 123,
                                        "endLine": 123,
                                        "snippet": "  args.app.use(sessionModule({secret: exports.secret, store: args.app.sessionStore, resave: true, saveUninitialized: true, name: 'express_sid', proxy: true, cookie: { secure: !!settings.ssl }}));"
                                    }
                                }
                            ],
                            "message": "Default session middleware settings: `path` not set. It indicates the path of the cookie; use it to compare against the request path. If this and domain match, then send the cookie in the request.",
                            "ruleId": "javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-path"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 123,
                                        "endLine": 123,
                                        "snippet": "  args.app.use(sessionModule({secret: exports.secret, store: args.app.sessionStore, resave: true, saveUninitialized: true, name: 'express_sid', proxy: true, cookie: { secure: !!settings.ssl }}));"
                                    }
                                }
                            ],
                            "message": "Default session middleware settings: `expires` not set. Use it to set expiration date for persistent cookies.",
                            "ruleId": "javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-expires"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 123,
                                        "endLine": 123,
                                        "snippet": "  args.app.use(sessionModule({secret: exports.secret, store: args.app.sessionStore, resave: true, saveUninitialized: true, name: 'express_sid', proxy: true, cookie: { secure: !!settings.ssl }}));"
                                    }
                                }
                            ],
                            "message": "Default session middleware settings: `secure` not set. It ensures the browser only sends the cookie over HTTPS.",
                            "ruleId": "javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-secure"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_5151_0.phtml",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1514_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3594_0.cpp",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4622_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 14,
                                        "endLine": 14,
                                        "snippet": "    node = node[key]"
                                    }
                                }
                            ],
                            "message": "Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.",
                            "ruleId": "javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_4306_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4153_0.cc",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5710_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4560_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4350_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3188_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 104,
                                        "endLine": 104,
                                        "snippet": "    memset(unpd, -1, szd); /*FIXME*/"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 250,
                                        "endLine": 250,
                                        "snippet": "    memset(structs, 0, 0x28);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_3605_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5265_0.cpp",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3163_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1006_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2229_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2098_0.java",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 50,
                                        "endLine": 50,
                                        "snippet": "        request.getSession().setAttribute(\"from\", targetUrl);"
                                    }
                                }
                            ],
                            "message": "Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls.",
                            "ruleId": "java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 76,
                                        "endLine": 76,
                                        "snippet": "\t\trequest.getSession().setAttribute(\"from\", whereFrom);"
                                    }
                                }
                            ],
                            "message": "Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls.",
                            "ruleId": "java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_4549_0.java",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 80,
                                        "endLine": 101,
                                        "snippet": "    private boolean isAdmin(String accountName) {\n        if (this.adminFilter != null) {\n            try {\n                InitialDirContext context = initContext();\n                String searchString = adminFilter.replace(\":login\", encodeForLdap(accountName));\n                SearchControls searchControls = new SearchControls();\n                searchControls.setSearchScope(SearchControls.SUBTREE_SCOPE);\n                NamingEnumeration<SearchResult> results = context.search(searchBase, searchString, searchControls);\n                if (results.hasMoreElements()) {\n                    results.nextElement();"
                                    }
                                }
                            ],
                            "message": "Detected non-constant data passed into an LDAP query. If this data can be controlled by an external user, this is an LDAP injection. Ensure data passed to an LDAP query is not controllable; or properly sanitize the data.",
                            "ruleId": "java.lang.security.audit.ldap-injection.ldap-injection"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 107,
                                        "endLine": 129,
                                        "snippet": "    private SearchResult lookupUser(String accountName) throws NamingException {\n        InitialDirContext context = initContext();\n\n        String searchString = searchFilter.replace(\":login\", encodeForLdap(accountName));\n\n        SearchControls searchControls = new SearchControls();\n        String[] attributeFilter = {idAttribute, nameAttribute, mailAttribute};\n        searchControls.setReturningAttributes(attributeFilter);\n        searchControls.setSearchScope(SearchControls.SUBTREE_SCOPE);\n"
                                    }
                                }
                            ],
                            "message": "Detected non-constant data passed into an LDAP query. If this data can be controlled by an external user, this is an LDAP injection. Ensure data passed to an LDAP query is not controllable; or properly sanitize the data.",
                            "ruleId": "java.lang.security.audit.ldap-injection.ldap-injection"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_3023_0.scala",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_784_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_378_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 18,
                                        "endLine": 18,
                                        "snippet": "\t\t\tif (file_exists ('layouts/' . $_GET['layout'] . '.html')) {"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 19,
                                        "endLine": 19,
                                        "snippet": "\t\t\t\t$page->layout = file_get_contents ('layouts/' . $_GET['layout'] . '.html');"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 20,
                                        "endLine": 20,
                                        "snippet": "\t\t\t} elseif (file_exists ('layouts/' . $_GET['layout'] . '/' . $_GET['layout'] . '.html')) {"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 21,
                                        "endLine": 21,
                                        "snippet": "\t\t\t\t$page->layout = file_get_contents ('layouts/' . $_GET['layout'] . '/' . $_GET['layout'] . '.html');"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 26,
                                        "endLine": 26,
                                        "snippet": "\t\t$page->layout = str_replace ('</head>', '<style>' . file_get_contents ($_GET['css']) . '</style></head>', $page->layout);"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 31,
                                        "endLine": 31,
                                        "snippet": "\t\t\tif (file_exists ('layouts/' . $_POST['layout'] . '.html')) {"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 32,
                                        "endLine": 32,
                                        "snippet": "\t\t\t\t$page->layout = file_get_contents ('layouts/' . $_POST['layout'] . '.html');"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 33,
                                        "endLine": 33,
                                        "snippet": "\t\t\t} elseif (file_exists ('layouts/' . $_POST['layout'] . '/' . $_POST['layout'] . '.html')) {"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 34,
                                        "endLine": 34,
                                        "snippet": "\t\t\t\t$page->layout = file_get_contents ('layouts/' . $_POST['layout'] . '/' . $_POST['layout'] . '.html');"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_1512_0.cpp",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5331_0.cpp",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2380_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 205,
                                        "endLine": 207,
                                        "snippet": "            $this->redirect(\n                FrontendNavigation::getURL(404)\n            );"
                                    }
                                }
                            ],
                            "message": "The `redirect()` method does not check its destination in any way. If you redirect to a URL provided by end-users, your application may be open to the unvalidated redirects security vulnerability. Consider using literal values or an allowlist to validate URLs.",
                            "ruleId": "php.symfony.security.audit.symfony-non-literal-redirect.symfony-non-literal-redirect"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_4192_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 154,
                                        "endLine": 154,
                                        "snippet": "          obj = obj[j];"
                                    }
                                }
                            ],
                            "message": "Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.",
                            "ruleId": "javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_808_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 192,
                                        "endLine": 192,
                                        "snippet": "\t\t\t\t\t\tif (!file_exists($dest_file)) {"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_4502_0.h",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_591_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5383_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2906_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 166,
                                        "endLine": 166,
                                        "snippet": "\t\t\tmemset(&dummy, 0, sizeof(struct ktermios));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_3422_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 124,
                                        "endLine": 124,
                                        "snippet": "    memset(out, 0, linesize * c->avctx->height);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 143,
                                        "endLine": 143,
                                        "snippet": "    memset(frame->data[1], 0, AVPALETTE_SIZE);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_499_0.java",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 20,
                                        "endLine": 20,
                                        "snippet": "    @RequestMapping(\"common/download\")"
                                    }
                                }
                            ],
                            "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                            "ruleId": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_1440_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 14,
                                        "endLine": 14,
                                        "snippet": "    exec ($command, $output, $return_var);"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection.",
                            "ruleId": "php.lang.security.exec-use.exec-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_1153_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2026_0.java",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 81,
                                        "endLine": 97,
                                        "snippet": "                String pushSessionId = httpReq.getParameter(PUSH_SESSION_ID_PARAM);\n\n                Session session = null;\n\n                if (pushSessionId != null) {\n                    ensureServletContextAvailable(request);\n                    PushContext pushContext = (PushContext) servletContext.getAttribute(PushContext.INSTANCE_KEY_NAME);\n                    session = pushContext.getSessionManager().getPushSession(pushSessionId);\n                }\n"
                                    }
                                }
                            ],
                            "message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.",
                            "ruleId": "java.lang.security.audit.crlf-injection-logs.crlf-injection-logs"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_3403_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1438_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_990_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1292_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5536_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4510_0.go",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 243,
                                        "endLine": 243,
                                        "snippet": "\t\t\tif _, err := io.Copy(outFile, tarReader); err != nil {"
                                    }
                                }
                            ],
                            "message": "Detected a possible denial-of-service via a zip bomb attack. By limiting the max bytes read, you can mitigate this attack. `io.CopyN()` can specify a size. Refer to https://bomb.codes/ to learn more about this attack and other ways to mitigate it.",
                            "ruleId": "go.lang.security.decompression_bomb.potential-dos-via-decompression-bomb"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 57,
                                        "endLine": 110,
                                        "snippet": "var Extractors = map[string]Extractor{\n\t\".tar.gz\": &TarGzExtractor{},\n\t\".tgz\":    &TarGzExtractor{},\n}\n\n// NewExtractor creates a new extractor matching the source file name\nfunc NewExtractor(source string) (Extractor, error) {\n\tfor suffix, extractor := range Extractors {\n\t\tif strings.HasSuffix(source, suffix) {\n\t\t\treturn extractor, nil"
                                    }
                                }
                            ],
                            "message": "Iteration over a possibly empty map `Extractors`. This is likely a bug or redundant code",
                            "ruleId": "trailofbits.go.iterate-over-empty-map.iterate-over-empty-map"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_4573_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_603_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 23,
                                        "endLine": 23,
                                        "snippet": "\tmemset(var, 0, sizeof(*var));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_1885_0.rs",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1737_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2362_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1480_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2304_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 106,
                                        "endLine": 106,
                                        "snippet": "\tmemset(info, 0, sizeof(*info));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_2310_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2847_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5489_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3998_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_77_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2319_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3976_0.cc",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2443_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 58,
                                        "endLine": 58,
                                        "snippet": "    memset(options, 0, sizeof(options_t));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_3561_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4138_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 73,
                                        "endLine": 73,
                                        "snippet": "\t\tif(isset($_GET[\"bat\"]) && file_exists(dirname(__FILE__) . \"/src/bat/\" . $_GET[\"bat\"] . \".php\")){"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_4794_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 60,
                                        "endLine": 60,
                                        "snippet": "if (is_file($filename))"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_2442_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_465_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3330_0.h",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_10_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5324_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5837_0.rb",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 6,
                                        "endLine": 242,
                                        "snippet": "class ApplicationController < ActionController::Base\n\n  protect_from_forgery\n\n  before_filter :set_context\n  before_filter :clear_setting_cache\n  before_filter \"hook(:app_before_filter, self)\"\n  after_filter  \"hook(:app_after_filter,  self)\"\n\n  helper_method :current_user_session, :current_user, :can_signup?"
                                    }
                                }
                            ],
                            "message": "Detected controller which does not enable cross-site request forgery protections using 'protect_from_forgery'. Add 'protect_from_forgery :with => :exception' to your controller class.",
                            "ruleId": "ruby.lang.security.missing-csrf-protection.missing-csrf-protection"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_2305_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3889_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2999_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3580_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4909_0.cc",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4219_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1043_0.h",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 52,
                                        "endLine": 52,
                                        "snippet": "  memset(prevRow, 0, sizeof(prevRow));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 101,
                                        "endLine": 101,
                                        "snippet": "  memset(prevRow, 0, sizeof(prevRow));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_409_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5654_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3748_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4575_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1294_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1966_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 273,
                                        "endLine": 273,
                                        "snippet": "      activeEl.parentNode.innerHTML += window.__SUB_SIDEBAR__;"
                                    }
                                }
                            ],
                            "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities",
                            "ruleId": "javascript.browser.security.insecure-document-method.insecure-document-method"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 76,
                                        "endLine": 76,
                                        "snippet": "          .filter(k => path.match(new RegExp('^' + k)))[0];"
                                    }
                                }
                            ],
                            "message": "RegExp() called with a `k` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",
                            "ruleId": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 222,
                                        "endLine": 222,
                                        "snippet": "      path.replace(new RegExp(`^/${local}`), '')"
                                    }
                                }
                            ],
                            "message": "RegExp() called with a `path` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",
                            "ruleId": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_2811_0.cpp",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1403_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3775_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1573_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1800_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3402_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3997_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4729_0.h",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_610_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3913_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3386_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 119,
                                        "endLine": 119,
                                        "snippet": "\t\t\t\tunlink(str_replace(array(\"{wwwroot}\",\"{staticroot}\"),SITE_ROOT,$file_location));"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 144,
                                        "endLine": 144,
                                        "snippet": "\t\t\t\tunlink($local_file);"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 159,
                                        "endLine": 159,
                                        "snippet": "\t\t\t\t\tunlink($local_file);"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 198,
                                        "endLine": 198,
                                        "snippet": "\t\t\t\tunlink($local_file);"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 240,
                                        "endLine": 240,
                                        "snippet": "\t\t\t\t\tunlink($local_file);"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_5621_0.h",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 83,
                                        "endLine": 83,
                                        "snippet": "\tmemset(scm, 0, sizeof(*scm));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_989_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1132_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_8_0.py",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 15,
                                        "endLine": 15,
                                        "snippet": "        classBase = eval(data[\"\"] + \".\" + data[\"\"].title())"
                                    }
                                }
                            ],
                            "message": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.",
                            "ruleId": "python.lang.security.audit.eval-detected.eval-detected"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 42,
                                        "endLine": 42,
                                        "snippet": "            import_module(\".\" + splitted[0], \"messagetypes\")"
                                    }
                                }
                            ],
                            "message": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.",
                            "ruleId": "python.lang.security.audit.non-literal-import.non-literal-import"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_1899_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2943_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2271_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1068_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 83,
                                        "endLine": 83,
                                        "snippet": "$sql = \"INSERT INTO users (id, user, email, password, created, modified, isAdmin) VALUES (1, 'admin', '\" . $_POST['contactEmail'] . \"', '\" . md5($_POST['systemAdminPass']) . \"', now(), now(), true)\";"
                                    }
                                }
                            ],
                            "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.",
                            "ruleId": "php.lang.security.injection.tainted-sql-string.tainted-sql-string"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 11,
                                        "endLine": 11,
                                        "snippet": "if (!file_exists($_POST['systemRootPath'] . \"index.php\")) {"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 156,
                                        "endLine": 156,
                                        "snippet": "$fp = fopen($_POST['systemRootPath'] . \"videos/configuration.php\", \"wb\");"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_4104_0.go",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5602_0.h",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5123_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1773_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 165,
                                        "endLine": 165,
                                        "snippet": "\tmemset(ef, 0, sizeof(struct exfat));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 193,
                                        "endLine": 193,
                                        "snippet": "\tmemset(ef->sb, 0, sizeof(struct exfat_super_block));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 242,
                                        "endLine": 242,
                                        "snippet": "\tmemset(ef->zero_cluster, 0, CLUSTER_SIZE(*ef->sb));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 280,
                                        "endLine": 280,
                                        "snippet": "\tmemset(ef->root, 0, sizeof(struct exfat_node));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_972_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5157_0.phtml",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5267_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 327,
                                        "endLine": 327,
                                        "snippet": "\tmemset(&cap, 0, sizeof(cap));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_3170_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 379,
                                        "endLine": 379,
                                        "snippet": "\tmemset (attr, '\\0', sizeof (MAPI_Attr));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_4819_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 200,
                                        "endLine": 200,
                                        "snippet": "\tmemset(p14, '\\0', 14);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 201,
                                        "endLine": 201,
                                        "snippet": "\tmemset(p16, '\\0', 16);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 202,
                                        "endLine": 202,
                                        "snippet": "\tmemset(p21, '\\0', 21);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 249,
                                        "endLine": 249,
                                        "snippet": "\tmemset(p16, '\\0', 16);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 250,
                                        "endLine": 250,
                                        "snippet": "\tmemset(p21, '\\0', 21);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_1157_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4608_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3838_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4267_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4178_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2941_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2905_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 166,
                                        "endLine": 166,
                                        "snippet": "\t\t\tmemset(&dummy, 0, sizeof(struct ktermios));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_4144_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 131,
                                        "endLine": 131,
                                        "snippet": "\tif(!file_exists($shopConfigFilePath)) exit;"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 132,
                                        "endLine": 132,
                                        "snippet": "\tif(!file_exists(dirname(dirname(dirname(dirname($shopConfigFilePath)))).\"/SOYCMS_SYSTEM_DIRECTORY\")) exit;//soyshop/webapp/conf/shop/shopid.conf.phpでなければ終了"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_3883_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3421_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 124,
                                        "endLine": 124,
                                        "snippet": "    memset(out, 0, linesize * c->avctx->height);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 143,
                                        "endLine": 143,
                                        "snippet": "    memset(frame->data[1], 0, AVPALETTE_SIZE);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_5552_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1738_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3414_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_193_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5093_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 204,
                                        "endLine": 204,
                                        "snippet": "\tmemset((void *) &saddr, 0, sizeof(saddr));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 278,
                                        "endLine": 278,
                                        "snippet": "\tmemset((void *) &saddr, 0, sizeof(saddr));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 369,
                                        "endLine": 369,
                                        "snippet": "\tmemset(&addr, 0, sizeof(addr));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_271_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2501_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4421_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 26,
                                        "endLine": 26,
                                        "snippet": "\tmemset(local_addr, 0, sizeof(fastd_peer_address_t));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_4568_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4130_0.h",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3569_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3333_0.py",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 83,
                                        "endLine": 83,
                                        "snippet": "    sha1 = hashlib.sha1()  # pylint: disable=E1101"
                                    }
                                }
                            ],
                            "message": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.",
                            "ruleId": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 96,
                                        "endLine": 96,
                                        "snippet": "    sha1 = hashlib.sha1()  # pylint: disable=E1101"
                                    }
                                }
                            ],
                            "message": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.",
                            "ruleId": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_4386_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4640_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_533_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 27,
                                        "endLine": 27,
                                        "snippet": "    var nextAbs = path.join(cwd, next)"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 27,
                                        "endLine": 27,
                                        "snippet": "    var nextAbs = path.join(cwd, next)"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 39,
                                        "endLine": 39,
                                        "snippet": "          if (!ignore(path.join(cwd, next, files[i]))) queue.push(path.join(next, files[i]))"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 39,
                                        "endLine": 39,
                                        "snippet": "          if (!ignore(path.join(cwd, next, files[i]))) queue.push(path.join(next, files[i]))"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 39,
                                        "endLine": 39,
                                        "snippet": "          if (!ignore(path.join(cwd, next, files[i]))) queue.push(path.join(next, files[i]))"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 39,
                                        "endLine": 39,
                                        "snippet": "          if (!ignore(path.join(cwd, next, files[i]))) queue.push(path.join(next, files[i]))"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 39,
                                        "endLine": 39,
                                        "snippet": "          if (!ignore(path.join(cwd, next, files[i]))) queue.push(path.join(next, files[i]))"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 89,
                                        "endLine": 89,
                                        "snippet": "    xfs.readlink(path.join(cwd, filename), function (err, linkname) {"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 141,
                                        "endLine": 141,
                                        "snippet": "    var rs = mapStream(xfs.createReadStream(path.join(cwd, filename)), header)"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 238,
                                        "endLine": 238,
                                        "snippet": "    var name = path.join(cwd, path.join('/', header.name))"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 238,
                                        "endLine": 238,
                                        "snippet": "    var name = path.join(cwd, path.join('/', header.name))"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 264,
                                        "endLine": 264,
                                        "snippet": "        var srcpath = path.join(cwd, path.join('/', header.linkname))"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 300,
                                        "endLine": 300,
                                        "snippet": "    validate(xfs, dir, path.join(cwd, '.'), function (err, valid) {"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 332,
                                        "endLine": 332,
                                        "snippet": "    if (err || st.isDirectory()) return validate(fs, path.join(name, '..'), root, cb)"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_1148_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2000_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2981_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3490_0.rb",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 23,
                                        "endLine": 23,
                                        "snippet": "        s.to_s.gsub(/&/, \"&amp;\").gsub(/\\\"/, \"&quot;\").gsub(/>/, \"&gt;\").gsub(/</, \"&lt;\").html_safe"
                                    }
                                }
                            ],
                            "message": "'html_safe()' does not make the supplied string safe. 'html_safe()' bypasses HTML escaping. If external data can reach here, this exposes your application to cross-site scripting (XSS) attacks. Ensure no external data reaches here.",
                            "ruleId": "ruby.rails.security.audit.xss.avoid-html-safe.avoid-html-safe"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 55,
                                        "endLine": 55,
                                        "snippet": "      s.html_safe? ? result.html_safe : result"
                                    }
                                }
                            ],
                            "message": "'html_safe()' does not make the supplied string safe. 'html_safe()' bypasses HTML escaping. If external data can reach here, this exposes your application to cross-site scripting (XSS) attacks. Ensure no external data reaches here.",
                            "ruleId": "ruby.rails.security.audit.xss.avoid-html-safe.avoid-html-safe"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_5677_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 252,
                                        "endLine": 252,
                                        "snippet": "\tmemset(&raw_data[size - sizeof(u64)], 0, sizeof(u64));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_659_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4796_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5611_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_979_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4233_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 44,
                                        "endLine": 44,
                                        "snippet": "    memset(sbody, 0, size);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 66,
                                        "endLine": 66,
                                        "snippet": "    memset(sbody, 0, size);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_2313_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 92,
                                        "endLine": 92,
                                        "snippet": "\t\tmemset(ids, 0, sizeof(ids));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 140,
                                        "endLine": 140,
                                        "snippet": "\tmemset(ids, 0, sizeof(ids));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 231,
                                        "endLine": 231,
                                        "snippet": "\tmemset(&s_in, 0, sizeof(s_in));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 257,
                                        "endLine": 257,
                                        "snippet": "\tmemset(&s_in, 0, sizeof(s_in));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_5398_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1385_1.go",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2794_0.h",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2366_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_708_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_315_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 88,
                                        "endLine": 88,
                                        "snippet": "    memset(p, 0xFF, padlen);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_64_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 17,
                                        "endLine": 17,
                                        "snippet": "    exec ($cmd.\" \".$v_user.\" json\", $output, $return_var);"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection.",
                            "ruleId": "php.lang.security.exec-use.exec-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 47,
                                        "endLine": 47,
                                        "snippet": "        exec ($cmd.\" \".$v_user.\" json\", $output, $return_var);"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection.",
                            "ruleId": "php.lang.security.exec-use.exec-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 57,
                                        "endLine": 57,
                                        "snippet": "                exec ($cmd.\" \".$v_user.\" \".$v_password, $output, $return_var);"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection.",
                            "ruleId": "php.lang.security.exec-use.exec-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 58,
                                        "endLine": 58,
                                        "snippet": "                unlink($v_password);"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_2110_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2325_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_646_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2333_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2733_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4129_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4115_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4571_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3709_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4965_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3795_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1110_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1394_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 125,
                                        "endLine": 125,
                                        "snippet": "\t\tmemset(vec, 1, nr);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_4979_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_88_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1034_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_497_0.java",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 148,
                                        "endLine": 148,
                                        "snippet": "        DocumentBuilder db = fact.newDocumentBuilder();"
                                    }
                                }
                            ],
                            "message": "DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false.",
                            "ruleId": "java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_2793_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1431_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3540_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 39,
                                        "endLine": 39,
                                        "snippet": "\tmemset(socket_client_hash, 0, sizeof(socket_client_hash));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_5753_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1015_0.go",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1418_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4512_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 45,
                                        "endLine": 45,
                                        "snippet": "      cp.exec(gitApp + ' add ' + files, gitExtra, done);"
                                    }
                                }
                            ],
                            "message": "Detected calls to child_process from a function argument `files`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
                            "ruleId": "javascript.lang.security.detect-child-process.detect-child-process"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 49,
                                        "endLine": 49,
                                        "snippet": "      cp.exec([gitApp, 'commit', '-m', '\"' + message + '\"'].join(' '), gitExtra, done);"
                                    }
                                }
                            ],
                            "message": "Detected calls to child_process from a function argument `message`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
                            "ruleId": "javascript.lang.security.detect-child-process.detect-child-process"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 49,
                                        "endLine": 49,
                                        "snippet": "      cp.exec([gitApp, 'commit', '-m', '\"' + message + '\"'].join(' '), gitExtra, done);"
                                    }
                                }
                            ],
                            "message": "Detected calls to child_process from a function argument `newVer`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
                            "ruleId": "javascript.lang.security.detect-child-process.detect-child-process"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 54,
                                        "endLine": 56,
                                        "snippet": "        [\n          gitApp, 'tag', '-a', tagName, '-m', '\"' + message + '\"'\n        ].join(' '),"
                                    }
                                }
                            ],
                            "message": "Detected calls to child_process from a function argument `message`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
                            "ruleId": "javascript.lang.security.detect-child-process.detect-child-process"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 54,
                                        "endLine": 56,
                                        "snippet": "        [\n          gitApp, 'tag', '-a', tagName, '-m', '\"' + message + '\"'\n        ].join(' '),"
                                    }
                                }
                            ],
                            "message": "Detected calls to child_process from a function argument `newVer`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
                            "ruleId": "javascript.lang.security.detect-child-process.detect-child-process"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 54,
                                        "endLine": 56,
                                        "snippet": "        [\n          gitApp, 'tag', '-a', tagName, '-m', '\"' + message + '\"'\n        ].join(' '),"
                                    }
                                }
                            ],
                            "message": "Detected calls to child_process from a function argument `tagName`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
                            "ruleId": "javascript.lang.security.detect-child-process.detect-child-process"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 39,
                                        "endLine": 39,
                                        "snippet": "  message = message.replace('%s', newVer).replace('\"', '').replace(\"'\", '');"
                                    }
                                }
                            ],
                            "message": "`message.replace('%s', newVer).replace` method will only replace the first occurrence when used with a string argument ('\"'). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag.",
                            "ruleId": "javascript.lang.security.audit.incomplete-sanitization.incomplete-sanitization"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 39,
                                        "endLine": 39,
                                        "snippet": "  message = message.replace('%s', newVer).replace('\"', '').replace(\"'\", '');"
                                    }
                                }
                            ],
                            "message": "`message.replace('%s', newVer).replace('\"', '').replace` method will only replace the first occurrence when used with a string argument (\"'\"). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag.",
                            "ruleId": "javascript.lang.security.audit.incomplete-sanitization.incomplete-sanitization"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_788_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4846_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4803_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 66,
                                        "endLine": 66,
                                        "snippet": "if (is_file($filename))"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_1136_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5092_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 173,
                                        "endLine": 173,
                                        "snippet": "\tmemset((void *) &saddr, 0, sizeof(saddr));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 239,
                                        "endLine": 239,
                                        "snippet": "\tmemset((void *) &saddr, 0, sizeof(saddr));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 330,
                                        "endLine": 330,
                                        "snippet": "\tmemset(&addr, 0, sizeof(addr));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_2045_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 111,
                                        "endLine": 111,
                                        "snippet": "  memset(scratch, 0, DIS_BUFSIZ+1);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_2170_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1184_0.cpp",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2452_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2885_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2408_0.h",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3346_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5737_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5873_0.rb",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 48,
                                        "endLine": 48,
                                        "snippet": "          self.headers['ETag'] ||= %(\"#{Digest::MD5.hexdigest(body)}\")"
                                    }
                                }
                            ],
                            "message": "Should not use md5 to generate hashes. md5 is proven to be vulnerable through the use of brute-force attacks. Could also result in collisions, leading to potential collision attacks. Use SHA256 or other hashing functions instead.",
                            "ruleId": "ruby.lang.security.weak-hashes-md5.weak-hashes-md5"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_5284_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1545_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1501_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4708_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_506_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 287,
                                        "endLine": 287,
                                        "snippet": "\t\t\t\tmemset(&rcp2, 0, sizeof(rcp2));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_3617_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5266_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3759_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1766_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 113,
                                        "endLine": 113,
                                        "snippet": "\t\tmemset(&ddi, 0, sizeof(ddi));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 137,
                                        "endLine": 137,
                                        "snippet": "\t\tmemset(&di, 0, sizeof(di));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 189,
                                        "endLine": 189,
                                        "snippet": "\t\tmemset(&ni, 0, sizeof(ni));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_2193_0.h",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1151_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1014_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1114_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4176_0.go",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4672_0.cc",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2092_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1750_0.rb",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 6,
                                        "endLine": 6,
                                        "snippet": "      output = `convert #{image_path.shellescape} -resize 400x400 -format %c -dither None -quantize YIQ -colors #{colors.to_i} -depth #{depth.to_i} histogram:info:-`"
                                    }
                                }
                            ],
                            "message": "Detected non-static command inside `...`. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code.",
                            "ruleId": "ruby.lang.security.dangerous-subshell.dangerous-subshell"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_34_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_833_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_839_0.cpp",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1500_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_502_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4834_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5399_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_792_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3758_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2175_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4380_0.cc",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4794_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 60,
                                        "endLine": 60,
                                        "snippet": "if (is_file($filename))"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_1294_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1974_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4575_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_8_0.py",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 15,
                                        "endLine": 15,
                                        "snippet": "        m = import_module(\"messagetypes.\" + data[\"\"])"
                                    }
                                }
                            ],
                            "message": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.",
                            "ruleId": "python.lang.security.audit.non-literal-import.non-literal-import"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 43,
                                        "endLine": 43,
                                        "snippet": "            import_module(\".\" + splitted[0], \"messagetypes\")"
                                    }
                                }
                            ],
                            "message": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.",
                            "ruleId": "python.lang.security.audit.non-literal-import.non-literal-import"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_3748_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4339_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 14,
                                        "endLine": 14,
                                        "snippet": "  const regexp = new RegExp(toReplace.map((envVar) => escapeRegExp(env[envVar])).join('|'), 'g');"
                                    }
                                }
                            ],
                            "message": "RegExp() called with a `envVar` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",
                            "ruleId": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 14,
                                        "endLine": 14,
                                        "snippet": "  const regexp = new RegExp(toReplace.map((envVar) => escapeRegExp(env[envVar])).join('|'), 'g');"
                                    }
                                }
                            ],
                            "message": "RegExp() called with a `env` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",
                            "ruleId": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_1642_0.h",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5060_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 62,
                                        "endLine": 62,
                                        "snippet": "\tmemset(dte_facs->called_ae, '\\0', sizeof(dte_facs->called_ae));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 63,
                                        "endLine": 63,
                                        "snippet": "\tmemset(dte_facs->calling_ae, '\\0', sizeof(dte_facs->calling_ae));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 278,
                                        "endLine": 278,
                                        "snippet": "\tmemset(&theirs, 0, sizeof(theirs));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 280,
                                        "endLine": 280,
                                        "snippet": "\tmemset(dte, 0, sizeof(*dte));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_2909_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5134_0.phtml",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_625_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5247_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 100,
                                        "endLine": 100,
                                        "snippet": "    return new RegExp('^' + re + '$', 'i');"
                                    }
                                }
                            ],
                            "message": "RegExp() called with a `host` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",
                            "ruleId": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_3775_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1403_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 59,
                                        "endLine": 59,
                                        "snippet": "if(file_exists($plugin_path.\"/config.php\"))"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 89,
                                        "endLine": 89,
                                        "snippet": "if(file_exists($plugin_path.\"/lang/\".$user['Language'].\".php\")) {"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_2811_0.cpp",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2492_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2943_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4665_0.cc",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1036_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1529_0.h",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_884_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1132_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3386_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 119,
                                        "endLine": 119,
                                        "snippet": "\t\t\t\tunlink(str_replace(array(\"{wwwroot}\",\"{staticroot}\"),SITE_ROOT,$file_location));"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 144,
                                        "endLine": 144,
                                        "snippet": "\t\t\t\tunlink($local_file);"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 159,
                                        "endLine": 159,
                                        "snippet": "\t\t\t\t\tunlink($local_file);"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 198,
                                        "endLine": 198,
                                        "snippet": "\t\t\t\tunlink($local_file);"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 240,
                                        "endLine": 240,
                                        "snippet": "\t\t\t\t\tunlink($local_file);"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_3481_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5383_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4009_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2380_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 205,
                                        "endLine": 207,
                                        "snippet": "            $this->redirect(\n                FrontendNavigation::getURL(404)\n            );"
                                    }
                                }
                            ],
                            "message": "The `redirect()` method does not check its destination in any way. If you redirect to a URL provided by end-users, your application may be open to the unvalidated redirects security vulnerability. Consider using literal values or an allowlist to validate URLs.",
                            "ruleId": "php.symfony.security.audit.symfony-non-literal-redirect.symfony-non-literal-redirect"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_1397_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1558_0.rb",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 18,
                                        "endLine": 115,
                                        "snippet": "class ApplicationController < ActionController::Base\n\n  require 'will_paginate'\n  require ::Rails.root.to_s+'/lib/iain-http_accept_language/lib/http_accept_language'\n\n# helper :all # include all helpers, all the time\n  protect_from_forgery\n\n  before_filter :set_locale\n  before_filter :gate_process"
                                    }
                                }
                            ],
                            "message": "Detected controller which does not enable cross-site request forgery protections using 'protect_from_forgery'. Add 'protect_from_forgery :with => :exception' to your controller class.",
                            "ruleId": "ruby.lang.security.missing-csrf-protection.missing-csrf-protection"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_609_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_374_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_463_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5331_0.cpp",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2476_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1512_0.cpp",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1671_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_103_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 180,
                                        "endLine": 180,
                                        "snippet": "\t\t$variables[$a[$i]] = unserialize( $a[$i+1] );"
                                    }
                                }
                            ],
                            "message": "Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution. Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).",
                            "ruleId": "php.lang.security.unserialize-use.unserialize-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_5789_1.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3570_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_891_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1153_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1440_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 14,
                                        "endLine": 14,
                                        "snippet": "    exec ($command, $output, $return_var);"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection.",
                            "ruleId": "php.lang.security.exec-use.exec-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_499_0.java",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 20,
                                        "endLine": 20,
                                        "snippet": "    @RequestMapping(\"common/download\")"
                                    }
                                }
                            ],
                            "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                            "ruleId": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_4216_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3332_0.py",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 161,
                                        "endLine": 161,
                                        "snippet": "        sha1 = hashlib.sha1()"
                                    }
                                }
                            ],
                            "message": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.",
                            "ruleId": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 177,
                                        "endLine": 177,
                                        "snippet": "        sha1 = hashlib.sha1()"
                                    }
                                }
                            ],
                            "message": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.",
                            "ruleId": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 74,
                                        "endLine": 74,
                                        "snippet": "        class_ = import_module(auth_type).Auth"
                                    }
                                }
                            ],
                            "message": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.",
                            "ruleId": "python.lang.security.audit.non-literal-import.non-literal-import"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_3237_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2280_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 152,
                                        "endLine": 152,
                                        "snippet": "                    eval('value = ref.' + parts[i].value + ';');"
                                    }
                                }
                            ],
                            "message": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.",
                            "ruleId": "javascript.browser.security.eval-detected.eval-detected"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_1519_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2068_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1480_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2362_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3404_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4542_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3741_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3394_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4573_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1292_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5536_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5726_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 73,
                                        "endLine": 73,
                                        "snippet": "\t\tmemset(str, ' ', sizeof(str));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_4712_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5553_0.rb",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 167,
                                        "endLine": 167,
                                        "snippet": "        OpenSSL::HMAC.hexdigest(OpenSSL::Digest::SHA1.new, secret, data)"
                                    }
                                }
                            ],
                            "message": "Should not use SHA1 to generate hashes. There is a proven SHA1 hash collision by Google, which could lead to vulnerabilities. Use SHA256, SHA3 or other hashing functions instead.",
                            "ruleId": "ruby.lang.security.weak-hashes-sha1.weak-hashes-sha1"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_392_0.h",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1438_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1763_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 357,
                                        "endLine": 357,
                                        "snippet": "\tmemset(&key->payload, KEY_DESTROY, sizeof(key->payload));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_4138_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 73,
                                        "endLine": 73,
                                        "snippet": "\t\tif(isset($_GET[\"bat\"]) && file_exists(dirname(__FILE__) . \"/src/bat/\" . $_GET[\"bat\"] . \".php\")){"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_1795_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3723_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_980_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2847_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_827_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3709_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4571_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5268_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_27_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3638_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1007_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2325_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4846_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4803_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 60,
                                        "endLine": 60,
                                        "snippet": "if (is_file($filename))"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_788_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4730_0.h",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1418_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5739_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2793_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5095_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1034_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_497_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4509_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4979_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1801_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3221_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4636_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1184_0.cpp",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2452_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4140_1.go",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2885_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4924_0.phtml",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_238_0.cpp",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1136_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_11_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5334_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4724_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2495_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1151_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1114_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3962_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 121,
                                        "endLine": 121,
                                        "snippet": "\tmemset(cmac_key, 0, sizeof(cmac_key));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 122,
                                        "endLine": 122,
                                        "snippet": "\tmemset(cipher_key, 0, sizeof(cipher_key));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 123,
                                        "endLine": 123,
                                        "snippet": "\tmemset(iv, 0, sizeof(iv));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_5155_0.phtml",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1807_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 69,
                                        "endLine": 69,
                                        "snippet": "\tmemset(&newrange.min_addr, 0, sizeof(newrange.min_addr));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 70,
                                        "endLine": 70,
                                        "snippet": "\tmemset(&newrange.max_addr, 0, sizeof(newrange.max_addr));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_376_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3770_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4267_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1157_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_972_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2314_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 92,
                                        "endLine": 92,
                                        "snippet": "\tfree(pktbuf);"
                                    }
                                }
                            ],
                            "message": "Variable 'pktbuf' was freed twice. This can lead to undefined behavior.",
                            "ruleId": "c.lang.security.double-free.double-free"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 351,
                                        "endLine": 351,
                                        "snippet": "\t\tmemset(ptr, 0, sizeof(*ti));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_2956_0.h",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5123_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1068_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 87,
                                        "endLine": 87,
                                        "snippet": "$sql = \"INSERT INTO users (id, user, email, password, created, modified, isAdmin) VALUES (1, 'admin', '\" . $_POST['contactEmail'] . \"', '\" . md5($_POST['systemAdminPass']) . \"', now(), now(), true)\";"
                                    }
                                }
                            ],
                            "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.",
                            "ruleId": "php.lang.security.injection.tainted-sql-string.tainted-sql-string"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 15,
                                        "endLine": 15,
                                        "snippet": "if (!file_exists($_POST['systemRootPath'] . \"index.php\")) {"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 160,
                                        "endLine": 160,
                                        "snippet": "$fp = fopen($_POST['systemRootPath'] . \"videos/configuration.php\", \"wb\");"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_4568_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_750_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 61,
                                        "endLine": 64,
                                        "snippet": "$query    = \"SELECT `id`, `name`\n             FROM `glpi_crontasks`\n             WHERE `state` = '\".Crontask::STATE_RUNNING.\"'\n                   AND unix_timestamp(`lastrun`) + $cycle * `frequency` < unix_timestamp(now())\";"
                                    }
                                }
                            ],
                            "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.",
                            "ruleId": "php.lang.security.injection.tainted-sql-string.tainted-sql-string"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_4521_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_676_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 95,
                                        "endLine": 95,
                                        "snippet": "\tmemset(_tmx_ptran_table, 0, _tmx_ptran_size*sizeof(pretran_slot_t));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 255,
                                        "endLine": 255,
                                        "snippet": "\t\tmemset(_tmx_proc_ptran, 0, sizeof(pretran_t));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_3865_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_447_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4862_0.h",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2930_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3494_0.rb",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 120,
                                        "endLine": 120,
                                        "snippet": "      headers['ETag'] = %(\"#{Digest::MD5.hexdigest(ActiveSupport::Cache.expand_cache_key(etag))}\")"
                                    }
                                }
                            ],
                            "message": "Should not use md5 to generate hashes. md5 is proven to be vulnerable through the use of brute-force attacks. Could also result in collisions, leading to potential collision attacks. Use SHA256 or other hashing functions instead.",
                            "ruleId": "ruby.lang.security.weak-hashes-md5.weak-hashes-md5"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_4144_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 131,
                                        "endLine": 131,
                                        "snippet": "\tif(!file_exists($shopConfigFilePath)) exit;"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 132,
                                        "endLine": 132,
                                        "snippet": "\tif(!file_exists(dirname(dirname(dirname(dirname($shopConfigFilePath)))).\"/SOYCMS_SYSTEM_DIRECTORY\")) exit;//soyshop/webapp/conf/shop/shopid.conf.phpでなければ終了"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_2941_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3883_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5076_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5710_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5611_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4796_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2186_0.py",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 85,
                                        "endLine": 85,
                                        "snippet": "    return mark_safe(force_text(result).translate(_safe_js_escapes))"
                                    }
                                }
                            ],
                            "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.",
                            "ruleId": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 104,
                                        "endLine": 104,
                                        "snippet": "    return mark_safe(json_dumps(d)[1:-1] + append)"
                                    }
                                }
                            ],
                            "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.",
                            "ruleId": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_2981_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3528_0.rb",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 191,
                                        "endLine": 191,
                                        "snippet": "      regexp = file_list.body.match(/name=[\"']#{Regexp.quote params[:filename]}[\"'].*size=[\"']([^\"']*)[\"']/)"
                                    }
                                }
                            ],
                            "message": "Found a potentially user-controllable argument in the construction of a regular expressions. This may result in excessive resource consumption when applied to certain inputs, or when the user is allowed to control the match target. Avoid allowing users to specify regular expressions processed by the server. If you must support user-controllable input in a regular expression, use an allow-list to restrict the expressions users may supply to limit catastrophic backtracking.",
                            "ruleId": "ruby.rails.security.brakeman.check-regex-dos.check-regex-dos"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_2000_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2100_0.java",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 150,
                                        "endLine": 150,
                                        "snippet": "                Object output = shell.evaluate(script);"
                                    }
                                }
                            ],
                            "message": "A expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation.",
                            "ruleId": "java.lang.security.audit.dangerous-groovy-shell.dangerous-groovy-shell"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_1148_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_697_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 123,
                                        "endLine": 123,
                                        "snippet": "  args.app.use(sessionModule({secret: exports.secret, store: args.app.sessionStore, resave: true, saveUninitialized: true, name: 'express_sid', proxy: true, cookie: { secure: !!settings.ssl }}));"
                                    }
                                }
                            ],
                            "message": "Default session middleware settings: `httpOnly` not set. It ensures the cookie is sent only over HTTP(S), not client JavaScript, helping to protect against cross-site scripting attacks.",
                            "ruleId": "javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-httponly"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 123,
                                        "endLine": 123,
                                        "snippet": "  args.app.use(sessionModule({secret: exports.secret, store: args.app.sessionStore, resave: true, saveUninitialized: true, name: 'express_sid', proxy: true, cookie: { secure: !!settings.ssl }}));"
                                    }
                                }
                            ],
                            "message": "Default session middleware settings: `domain` not set. It indicates the domain of the cookie; use it to compare against the domain of the server in which the URL is being requested. If they match, then check the path attribute next.",
                            "ruleId": "javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-domain"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 123,
                                        "endLine": 123,
                                        "snippet": "  args.app.use(sessionModule({secret: exports.secret, store: args.app.sessionStore, resave: true, saveUninitialized: true, name: 'express_sid', proxy: true, cookie: { secure: !!settings.ssl }}));"
                                    }
                                }
                            ],
                            "message": "Default session middleware settings: `path` not set. It indicates the path of the cookie; use it to compare against the request path. If this and domain match, then send the cookie in the request.",
                            "ruleId": "javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-path"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 123,
                                        "endLine": 123,
                                        "snippet": "  args.app.use(sessionModule({secret: exports.secret, store: args.app.sessionStore, resave: true, saveUninitialized: true, name: 'express_sid', proxy: true, cookie: { secure: !!settings.ssl }}));"
                                    }
                                }
                            ],
                            "message": "Default session middleware settings: `expires` not set. Use it to set expiration date for persistent cookies.",
                            "ruleId": "javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-expires"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 123,
                                        "endLine": 123,
                                        "snippet": "  args.app.use(sessionModule({secret: exports.secret, store: args.app.sessionStore, resave: true, saveUninitialized: true, name: 'express_sid', proxy: true, cookie: { secure: !!settings.ssl }}));"
                                    }
                                }
                            ],
                            "message": "Default session middleware settings: `secure` not set. It ensures the browser only sends the cookie over HTTPS.",
                            "ruleId": "javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-secure"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_3163_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1006_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2366_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4469_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5398_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1997_0.java",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 105,
                                        "endLine": 105,
                                        "snippet": "\t@RequestMapping(\"/oauth/confirm_access\")"
                                    }
                                }
                            ],
                            "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                            "ruleId": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_2381_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3188_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 104,
                                        "endLine": 104,
                                        "snippet": "    memset(unpd, -1, szd); /*FIXME*/"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 256,
                                        "endLine": 256,
                                        "snippet": "    memset(structs, 0, 0x28);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_1355_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2213_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4874_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 88,
                                        "endLine": 88,
                                        "snippet": "\t\tsendFile.apply( response, [ path.join( configuration.directory, locale + configuration.extension ) ] );"
                                    }
                                }
                            ],
                            "message": "Possible writing outside of the destination, make sure that the target path is nested in the intended destination",
                            "ruleId": "javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 120,
                                        "endLine": 120,
                                        "snippet": "\t\tresponse.send( result );"
                                    }
                                }
                            ],
                            "message": "Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML.",
                            "ruleId": "javascript.express.security.audit.xss.direct-response-write.direct-response-write"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 88,
                                        "endLine": 88,
                                        "snippet": "\t\tsendFile.apply( response, [ path.join( configuration.directory, locale + configuration.extension ) ] );"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_4306_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2860_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2066_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1646_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1540_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4858_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 216,
                                        "endLine": 216,
                                        "snippet": "\t\tmemset(ctx.master_key_descriptor, 0x42, FS_KEY_DESCRIPTOR_SIZE);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_3870_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1485_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 296,
                                        "endLine": 296,
                                        "snippet": "    $fp = popen($command_line, 'r');"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection.",
                            "ruleId": "php.lang.security.exec-use.exec-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 296,
                                        "endLine": 296,
                                        "snippet": "    $fp = popen($command_line, 'r');"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.",
                            "ruleId": "php.lang.security.tainted-exec.tainted-exec"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_5859_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1381_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2367_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 203,
                                        "endLine": 203,
                                        "snippet": "\t\t\t\t$t_filter = unserialize( $t_token );"
                                    }
                                }
                            ],
                            "message": "Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution. Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).",
                            "ruleId": "php.lang.security.unserialize-use.unserialize-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 206,
                                        "endLine": 206,
                                        "snippet": "\t\t\t$t_filter = unserialize( $f_filter_string );"
                                    }
                                }
                            ],
                            "message": "Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution. Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).",
                            "ruleId": "php.lang.security.unserialize-use.unserialize-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_502_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 231,
                                        "endLine": 231,
                                        "snippet": "\tmemset (bin, 0, sizeof (struct r_bin_dyldcache_obj_t));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_5213_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1710_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4120_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 134,
                                        "endLine": 134,
                                        "snippet": "\t\t\tres.redirect(url + '#nodebb-comments');"
                                    }
                                }
                            ],
                            "message": "The application redirects to a URL specified by user-supplied input `req` that is not validated. This could redirect users to malicious locations. Consider using an allow-list approach to validate URLs, or warn users they are being redirected to a third-party website.",
                            "ruleId": "javascript.express.security.audit.express-open-redirect.express-open-redirect"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_1991_1.ts",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1772_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1149_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2763_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1637_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2993_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 57,
                                        "endLine": 57,
                                        "snippet": "\t\tmemset(fl4, 0, sizeof(*fl4));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 62,
                                        "endLine": 62,
                                        "snippet": "\t\tmemset(fl6, 0, sizeof(*fl6));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_2098_0.java",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 50,
                                        "endLine": 50,
                                        "snippet": "        request.getSession().setAttribute(\"from\", targetUrl);"
                                    }
                                }
                            ],
                            "message": "Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls.",
                            "ruleId": "java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 76,
                                        "endLine": 76,
                                        "snippet": "\t\trequest.getSession().setAttribute(\"from\", whereFrom);"
                                    }
                                }
                            ],
                            "message": "Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls.",
                            "ruleId": "java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_4549_0.java",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 80,
                                        "endLine": 101,
                                        "snippet": "    private boolean isAdmin(String accountName) {\n        if (this.adminFilter != null) {\n            try {\n                InitialDirContext context = initContext();\n                String searchString = adminFilter.replace(\":login\", accountName);\n                SearchControls searchControls = new SearchControls();\n                searchControls.setSearchScope(SearchControls.SUBTREE_SCOPE);\n                NamingEnumeration<SearchResult> results = context.search(searchBase, searchString, searchControls);\n                if (results.hasMoreElements()) {\n                    results.nextElement();"
                                    }
                                }
                            ],
                            "message": "Detected non-constant data passed into an LDAP query. If this data can be controlled by an external user, this is an LDAP injection. Ensure data passed to an LDAP query is not controllable; or properly sanitize the data.",
                            "ruleId": "java.lang.security.audit.ldap-injection.ldap-injection"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 107,
                                        "endLine": 129,
                                        "snippet": "    private SearchResult lookupUser(String accountName) throws NamingException {\n        InitialDirContext context = initContext();\n\n        String searchString = searchFilter.replace(\":login\", accountName);\n\n        SearchControls searchControls = new SearchControls();\n        String[] attributeFilter = {idAttribute, nameAttribute, mailAttribute};\n        searchControls.setReturningAttributes(attributeFilter);\n        searchControls.setSearchScope(SearchControls.SUBTREE_SCOPE);\n"
                                    }
                                }
                            ],
                            "message": "Detected non-constant data passed into an LDAP query. If this data can be controlled by an external user, this is an LDAP injection. Ensure data passed to an LDAP query is not controllable; or properly sanitize the data.",
                            "ruleId": "java.lang.security.audit.ldap-injection.ldap-injection"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_4330_0.go",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5756_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4496_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5309_0.cpp",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3023_0.scala",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1511_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3746_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4445_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5818_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5145_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2094_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5617_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5712_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 174,
                                        "endLine": 192,
                                        "snippet": "$htmlString .= '</select>'\n    . '</td>'\n    . '</tr>'\n    . '<tr><td>' . __('VIEW name') . '</td>'\n    . '<td><input type=\"text\" size=\"20\" name=\"view[name]\" onfocus=\"this.select()\"'\n    . ' value=\"' . htmlspecialchars($view['name']) . '\" />'\n    . '</td>'\n    . '</tr>'\n    . '<tr><td>' . __('Column names') . '</td>'\n    . '<td><input type=\"text\" maxlength=\"100\" size=\"50\" name=\"view[column_names]\"'"
                                    }
                                }
                            ],
                            "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.",
                            "ruleId": "php.lang.security.injection.tainted-sql-string.tainted-sql-string"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_1131_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3514_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 101,
                                        "endLine": 101,
                                        "snippet": "\t\tmemset(zero, 0, sizeof(zero));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 174,
                                        "endLine": 174,
                                        "snippet": "\tmemset(&mreq, 0, sizeof(mreq));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_2168_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4389_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_472_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5352_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 167,
                                        "endLine": 167,
                                        "snippet": "\t\tmemset(&karactx, 0, sizeof karactx);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_1744_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4938_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4618_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 55,
                                        "endLine": 55,
                                        "snippet": "      cp.exec(gitApp + \" add \" + files, gitExtra, done);"
                                    }
                                }
                            ],
                            "message": "Detected calls to child_process from a function argument `files`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
                            "ruleId": "javascript.lang.security.detect-child-process.detect-child-process"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 59,
                                        "endLine": 59,
                                        "snippet": "      cp.exec([gitApp, \"commit\", \"-m\", message].join(\" \"), gitExtra, done);"
                                    }
                                }
                            ],
                            "message": "Detected calls to child_process from a function argument `message`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
                            "ruleId": "javascript.lang.security.detect-child-process.detect-child-process"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 59,
                                        "endLine": 59,
                                        "snippet": "      cp.exec([gitApp, \"commit\", \"-m\", message].join(\" \"), gitExtra, done);"
                                    }
                                }
                            ],
                            "message": "Detected calls to child_process from a function argument `newVer`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
                            "ruleId": "javascript.lang.security.detect-child-process.detect-child-process"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 64,
                                        "endLine": 64,
                                        "snippet": "        [gitApp, \"tag\", \"-a\", escapeQuotes(tagName), \"-m\", message].join(\" \"),"
                                    }
                                }
                            ],
                            "message": "Detected calls to child_process from a function argument `message`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
                            "ruleId": "javascript.lang.security.detect-child-process.detect-child-process"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 64,
                                        "endLine": 64,
                                        "snippet": "        [gitApp, \"tag\", \"-a\", escapeQuotes(tagName), \"-m\", message].join(\" \"),"
                                    }
                                }
                            ],
                            "message": "Detected calls to child_process from a function argument `newVer`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
                            "ruleId": "javascript.lang.security.detect-child-process.detect-child-process"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 64,
                                        "endLine": 64,
                                        "snippet": "        [gitApp, \"tag\", \"-a\", escapeQuotes(tagName), \"-m\", message].join(\" \"),"
                                    }
                                }
                            ],
                            "message": "Detected calls to child_process from a function argument `tagName`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
                            "ruleId": "javascript.lang.security.detect-child-process.detect-child-process"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_1690_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5775_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_777_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_374_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5773_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4196_0.cpp",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_463_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1150_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5421_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4905_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2414_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_775_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 85,
                                        "endLine": 85,
                                        "snippet": "    let newTmpSubDir = path.join(newTmpDir, subDir);"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 121,
                                        "endLine": 121,
                                        "snippet": "        await fs.remove(path.join(cwd, ignoredFile));"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_1707_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 82,
                                        "endLine": 82,
                                        "snippet": "        unlink($file_name);"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_891_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5186_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3814_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 132,
                                        "endLine": 132,
                                        "snippet": "    var re = new RegExp(\"([?|&])\" + param + \"=.*?(&|$)\",\"i\");"
                                    }
                                }
                            ],
                            "message": "RegExp() called with a `param` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",
                            "ruleId": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_3383_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2416_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 153,
                                        "endLine": 153,
                                        "snippet": "\t\t\tassign_session_prefs(unserialize(stripslashes($_config[\"pref_defaults\"])), 1);"
                                    }
                                }
                            ],
                            "message": "Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution. Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).",
                            "ruleId": "php.lang.security.unserialize-use.unserialize-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 155,
                                        "endLine": 155,
                                        "snippet": "\t\t\tassign_session_prefs(unserialize(stripslashes($row['preferences'])), 1);"
                                    }
                                }
                            ],
                            "message": "Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution. Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).",
                            "ruleId": "php.lang.security.unserialize-use.unserialize-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_5825_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3252_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5143_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2158_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3483_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5428_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2951_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3306_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5010_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1510_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_558_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4622_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 33,
                                        "endLine": 33,
                                        "snippet": "    node = node[key] = {...newNode, [newKey]: newNode[newKey] || {}}"
                                    }
                                }
                            ],
                            "message": "Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.",
                            "ruleId": "javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_4153_0.cc",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4483_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 106,
                                        "endLine": 106,
                                        "snippet": "    memset(&strm, '\\0', sizeof(strm));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 293,
                                        "endLine": 293,
                                        "snippet": "    memset(&stream, 0, sizeof(stream));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_392_0.h",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2844_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4802_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 66,
                                        "endLine": 66,
                                        "snippet": "if (is_file($filename))"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_2361_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_336_0.go",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4353_0.java",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 98,
                                        "endLine": 98,
                                        "snippet": "      SSLContext sslContext = SSLContext.getInstance(\"TLS\");"
                                    }
                                }
                            ],
                            "message": "An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use SSLContext.getInstance(\"TLSv1.2\") for the best security.",
                            "ruleId": "java.lang.security.audit.weak-ssl-context.weak-ssl-context"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 93,
                                        "endLine": 93,
                                        "snippet": "    DefaultHttpClient defaultHttpClient = new DefaultHttpClient();"
                                    }
                                }
                            ],
                            "message": "DefaultHttpClient is deprecated. Further, it does not support connections using TLS1.2, which makes using DefaultHttpClient a security hazard. Use HttpClientBuilder instead.",
                            "ruleId": "java.lang.security.audit.crypto.ssl.defaulthttpclient-is-deprecated.defaulthttpclient-is-deprecated"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_965_0.go",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_663_0.py",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 134,
                                        "endLine": 134,
                                        "snippet": "                self.current_value = eval(node.func.id + expr)"
                                    }
                                }
                            ],
                            "message": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.",
                            "ruleId": "python.lang.security.audit.eval-detected.eval-detected"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_3182_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5557_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1400_0.rb",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 26,
                                        "endLine": 26,
                                        "snippet": "      redirect_to params[:ref]"
                                    }
                                }
                            ],
                            "message": "When a redirect uses user input, a malicious user can spoof a website under a trusted URL or access restricted parts of a site. When using user-supplied values, sanitize the value before using it for the redirect.",
                            "ruleId": "ruby.rails.security.audit.xss.avoid-redirect.avoid-redirect"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 26,
                                        "endLine": 26,
                                        "snippet": "      redirect_to params[:ref]"
                                    }
                                }
                            ],
                            "message": "Found potentially unsafe handling of redirect behavior params[:ref]. Do not pass `params` to `redirect_to` without the `:only_path => true` hash value.",
                            "ruleId": "ruby.rails.security.brakeman.check-redirect-to.check-redirect-to"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_4488_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3682_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1072_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2979_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2557_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5238_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5157_0.phtml",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2188_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1269_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2921_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3442_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3939_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1241_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4408_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3477_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_647_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5673_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2167_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_556_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5470_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_549_0.rb",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 25,
                                        "endLine": 25,
                                        "snippet": "    content_tag(:ul) do"
                                    }
                                }
                            ],
                            "message": "'content_tag()' bypasses HTML escaping for some portion of the content. If external data can reach here, this exposes your application to cross-site scripting (XSS) attacks. Ensure no external data reaches here. If you must do this, create your HTML manually and use 'html_safe'. Ensure no external data enters the HTML-safe string!",
                            "ruleId": "ruby.rails.security.audit.xss.avoid-content-tag.avoid-content-tag"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 27,
                                        "endLine": 27,
                                        "snippet": "        concat(content_tag(:li, tag.name))"
                                    }
                                }
                            ],
                            "message": "'content_tag()' bypasses HTML escaping for some portion of the content. If external data can reach here, this exposes your application to cross-site scripting (XSS) attacks. Ensure no external data reaches here. If you must do this, create your HTML manually and use 'html_safe'. Ensure no external data enters the HTML-safe string!",
                            "ruleId": "ruby.rails.security.audit.xss.avoid-content-tag.avoid-content-tag"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 12,
                                        "endLine": 12,
                                        "snippet": "    model.tags.inject(\"\".html_safe) do |out, tag|"
                                    }
                                }
                            ],
                            "message": "'html_safe()' does not make the supplied string safe. 'html_safe()' bypasses HTML escaping. If external data can reach here, this exposes your application to cross-site scripting (XSS) attacks. Ensure no external data reaches here.",
                            "ruleId": "ruby.rails.security.audit.xss.avoid-html-safe.avoid-html-safe"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_4920_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2522_0.h",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5126_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3278_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3608_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4563_0.rb",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 89,
                                        "endLine": 89,
                                        "snippet": "        content_tag(\"script\", javascript_cdata_section(content), html_options)"
                                    }
                                }
                            ],
                            "message": "'content_tag()' bypasses HTML escaping for some portion of the content. If external data can reach here, this exposes your application to cross-site scripting (XSS) attacks. Ensure no external data reaches here. If you must do this, create your HTML manually and use 'html_safe'. Ensure no external data enters the HTML-safe string!",
                            "ruleId": "ruby.rails.security.audit.xss.avoid-content-tag.avoid-content-tag"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 36,
                                        "endLine": 36,
                                        "snippet": "        javascript.html_safe? ? result.html_safe : result"
                                    }
                                }
                            ],
                            "message": "'html_safe()' does not make the supplied string safe. 'html_safe()' bypasses HTML escaping. If external data can reach here, this exposes your application to cross-site scripting (XSS) attacks. Ensure no external data reaches here.",
                            "ruleId": "ruby.rails.security.audit.xss.avoid-html-safe.avoid-html-safe"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 93,
                                        "endLine": 93,
                                        "snippet": "        \"\\n//#{cdata_section(\"\\n#{content}\\n//\")}\\n\".html_safe"
                                    }
                                }
                            ],
                            "message": "'html_safe()' does not make the supplied string safe. 'html_safe()' bypasses HTML escaping. If external data can reach here, this exposes your application to cross-site scripting (XSS) attacks. Ensure no external data reaches here.",
                            "ruleId": "ruby.rails.security.audit.xss.avoid-html-safe.avoid-html-safe"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_5827_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 132,
                                        "endLine": 132,
                                        "snippet": "        memset(dummy_buf, 0, sizeof(dummy_buf));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_5635_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5771_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5850_0.cpp",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1152_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 66,
                                        "endLine": 66,
                                        "snippet": "\t\t\t\t\t\t@unlink(base64_decode($recording_file_path[$index]));"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 65,
                                        "endLine": 65,
                                        "snippet": "\t\t\t\t\tif (file_exists(base64_decode($recording_file_path[$index]))) {"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 66,
                                        "endLine": 66,
                                        "snippet": "\t\t\t\t\t\t@unlink(base64_decode($recording_file_path[$index]));"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_5184_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_423_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_11_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_28_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4083_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4165_0.cc",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1857_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2386_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 355,
                                        "endLine": 355,
                                        "snippet": "\tmemset(&key->payload, KEY_DESTROY, sizeof(key->payload));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_1862_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_710_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5358_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2437_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1135_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3206_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_376_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4734_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_75_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5042_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1348_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3713_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_988_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5350_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 273,
                                        "endLine": 273,
                                        "snippet": "\tmemset(ctx->result, 0, ds);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_269_0.go",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 49,
                                        "endLine": 49,
                                        "snippet": "\t\t\"next\":     template.URL(url.QueryEscape(redirectURL)),"
                                    }
                                }
                            ],
                            "message": "Semgrep could not determine that the argument to 'template.HTML()' is a constant. 'template.HTML()' and similar does not escape contents. Be absolutely sure there is no user-controlled data in this template. If user data can reach this template, you may have a XSS vulnerability. Instead, do not use this function and use 'template.Execute()'.",
                            "ruleId": "go.lang.security.audit.xss.template-html-does-not-escape.unsafe-template-type"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 128,
                                        "endLine": 128,
                                        "snippet": "\t\t\"next\":       template.URL(url.QueryEscape(redirectURL)),"
                                    }
                                }
                            ],
                            "message": "Semgrep could not determine that the argument to 'template.HTML()' is a constant. 'template.HTML()' and similar does not escape contents. Be absolutely sure there is no user-controlled data in this template. If user data can reach this template, you may have a XSS vulnerability. Instead, do not use this function and use 'template.Execute()'.",
                            "ruleId": "go.lang.security.audit.xss.template-html-does-not-escape.unsafe-template-type"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_3990_0.go",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5454_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4411_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1917_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1154_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5185_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5813_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_676_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 95,
                                        "endLine": 95,
                                        "snippet": "\tmemset(_tmx_ptran_table, 0, _tmx_ptran_size*sizeof(pretran_slot_t));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 255,
                                        "endLine": 255,
                                        "snippet": "\t\tmemset(_tmx_proc_ptran, 0, sizeof(pretran_t));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_4286_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5020_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2448_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 17,
                                        "endLine": 17,
                                        "snippet": "    exec ($cmd.\" \".$v_user.\" json\", $output, $return_var);"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection.",
                            "ruleId": "php.lang.security.exec-use.exec-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 47,
                                        "endLine": 47,
                                        "snippet": "        exec ($cmd.\" \".$v_user.\" json\", $output, $return_var);"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection.",
                            "ruleId": "php.lang.security.exec-use.exec-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 57,
                                        "endLine": 57,
                                        "snippet": "                exec ($cmd.\" \".$v_user.\" \".$v_password, $output, $return_var);"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection.",
                            "ruleId": "php.lang.security.exec-use.exec-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 58,
                                        "endLine": 58,
                                        "snippet": "                unlink($v_password);"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_2754_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3480_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1249_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3310_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 130,
                                        "endLine": 130,
                                        "snippet": "\tmemset(hx,0,sizeof(struct hexline));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_4442_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1999_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 4,
                                        "endLine": 4,
                                        "snippet": "  child_process.exec(command, {maxBuffer : 1500 * 1024}, function(error, stdout, stderr) {"
                                    }
                                }
                            ],
                            "message": "Detected calls to child_process from a function argument `command`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
                            "ruleId": "javascript.lang.security.detect-child-process.detect-child-process"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_1240_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 35,
                                        "endLine": 35,
                                        "snippet": "\tmemset(&raead, 0, sizeof(raead));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 52,
                                        "endLine": 52,
                                        "snippet": "\tmemset(&rcipher, 0, sizeof(rcipher));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 69,
                                        "endLine": 69,
                                        "snippet": "\tmemset(&rcomp, 0, sizeof(rcomp));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 85,
                                        "endLine": 85,
                                        "snippet": "\tmemset(&racomp, 0, sizeof(racomp));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 101,
                                        "endLine": 101,
                                        "snippet": "\tmemset(&rakcipher, 0, sizeof(rakcipher));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 120,
                                        "endLine": 120,
                                        "snippet": "\tmemset(&rkpp, 0, sizeof(rkpp));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 136,
                                        "endLine": 136,
                                        "snippet": "\tmemset(&rhash, 0, sizeof(rhash));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 151,
                                        "endLine": 151,
                                        "snippet": "\tmemset(&rhash, 0, sizeof(rhash));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 166,
                                        "endLine": 166,
                                        "snippet": "\tmemset(&rrng, 0, sizeof(rrng));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 182,
                                        "endLine": 182,
                                        "snippet": "\tmemset(ualg, 0, sizeof(*ualg));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 200,
                                        "endLine": 200,
                                        "snippet": "\t\tmemset(&rl, 0, sizeof(rl));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_3749_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4910_0.cc",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4627_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 74,
                                        "endLine": 74,
                                        "snippet": "    const zipProcess = cp.exec(command, {"
                                    }
                                }
                            ],
                            "message": "Detected calls to child_process from a function argument `options`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
                            "ruleId": "javascript.lang.security.detect-child-process.detect-child-process"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 56,
                                        "endLine": 56,
                                        "snippet": "    const filePath = path.join(fullPath, f);"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 56,
                                        "endLine": 56,
                                        "snippet": "    const filePath = path.join(fullPath, f);"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 99,
                                        "endLine": 99,
                                        "snippet": "    const output = fs.createWriteStream(path.resolve(cwd, options.destination));"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 99,
                                        "endLine": 99,
                                        "snippet": "    const output = fs.createWriteStream(path.resolve(cwd, options.destination));"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 108,
                                        "endLine": 108,
                                        "snippet": "      const fullPath = path.resolve(cwd, source);"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_4067_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2827_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 53,
                                        "endLine": 53,
                                        "snippet": "\t\t@unlink(AT_CONTENT_DIR.'/feeds/'.$feed_id.'_rss.cache');"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 47,
                                        "endLine": 47,
                                        "snippet": "\t\tif ($f = @fopen($title_file, 'w')) {"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 53,
                                        "endLine": 53,
                                        "snippet": "\t\t@unlink(AT_CONTENT_DIR.'/feeds/'.$feed_id.'_rss.cache');"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 71,
                                        "endLine": 71,
                                        "snippet": "\tif (file_exists($title_file)) {"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 72,
                                        "endLine": 72,
                                        "snippet": "\t\t$_GET['title'] = file_get_contents($title_file);"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_1295_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1759_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_753_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1502_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5872_0.h",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2555_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2892_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1921_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1707_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4686_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2626_0.java",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 42,
                                        "endLine": 42,
                                        "snippet": "\t@RequestMapping(\"/module/htmlformentry/htmlFormFromFile.form\")"
                                    }
                                }
                            ],
                            "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                            "ruleId": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 74,
                                        "endLine": 74,
                                        "snippet": "\t\t\t\t\tf = new File(filePath);"
                                    }
                                }
                            ],
                            "message": "Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.",
                            "ruleId": "java.spring.security.injection.tainted-file-path.tainted-file-path"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 84,
                                        "endLine": 84,
                                        "snippet": "\t\t\t\tIOUtils.copy(new FileInputStream(f), writer, \"UTF-8\");"
                                    }
                                }
                            ],
                            "message": "Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.",
                            "ruleId": "java.spring.security.injection.tainted-file-path.tainted-file-path"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_1379_0.h",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1150_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4679_0.cc",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5773_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_781_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 106,
                                        "endLine": 106,
                                        "snippet": "    obj = obj[key];"
                                    }
                                }
                            ],
                            "message": "Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.",
                            "ruleId": "javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_4196_0.cpp",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_752_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5567_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 106,
                                        "endLine": 106,
                                        "snippet": "\tmemset(&hmac_misc, 0, sizeof hmac_misc);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 253,
                                        "endLine": 253,
                                        "snippet": "\tmemset(ekp->decrypted_data, 0, ekp->decrypted_datalen);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_971_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1250_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1536_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_555_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2416_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 156,
                                        "endLine": 156,
                                        "snippet": "\t\t\tassign_session_prefs(unserialize(stripslashes($_config[\"pref_defaults\"])), 1);"
                                    }
                                }
                            ],
                            "message": "Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution. Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).",
                            "ruleId": "php.lang.security.unserialize-use.unserialize-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 158,
                                        "endLine": 158,
                                        "snippet": "\t\t\tassign_session_prefs(unserialize(stripslashes($row['preferences'])), 1);"
                                    }
                                }
                            ],
                            "message": "Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution. Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).",
                            "ruleId": "php.lang.security.unserialize-use.unserialize-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_5143_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1977_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2494_1.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4453_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2169_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4309_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3806_0.rb",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 1,
                                        "endLine": 4,
                                        "snippet": "class ApplicationController < ActionController::Base\n  include Console::Rescue\n\n  protect_from_forgery"
                                    }
                                }
                            ],
                            "message": "Detected controller which does not enable cross-site request forgery protections using 'protect_from_forgery'. Add 'protect_from_forgery :with => :exception' to your controller class.",
                            "ruleId": "ruby.lang.security.missing-csrf-protection.missing-csrf-protection"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_3383_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4802_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 60,
                                        "endLine": 60,
                                        "snippet": "if (is_file($filename))"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_3126_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2844_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5188_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4548_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1914_0.go",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4639_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3306_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_603_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 23,
                                        "endLine": 23,
                                        "snippet": "\tmemset(var, 0, sizeof(*var));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_4460_0.py",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 172,
                                        "endLine": 172,
                                        "snippet": "            tree = etree.parse(xmlf)"
                                    }
                                }
                            ],
                            "message": "The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and \"XML bombs\" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`.",
                            "ruleId": "python.lang.security.use-defused-xml-parse.use-defused-xml-parse"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_5428_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_802_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3719_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5134_0.phtml",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_135_0.cc",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4958_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_778_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_564_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2025_0.rb",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 26,
                                        "endLine": 26,
                                        "snippet": "         attribute_value = '{MD5}' + Base64.encode64(Digest::MD5.digest(str)).chomp! "
                                    }
                                }
                            ],
                            "message": "Should not use md5 to generate hashes. md5 is proven to be vulnerable through the use of brute-force attacks. Could also result in collisions, leading to potential collision attacks. Use SHA256 or other hashing functions instead.",
                            "ruleId": "ruby.lang.security.weak-hashes-md5.weak-hashes-md5"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 28,
                                        "endLine": 28,
                                        "snippet": "         attribute_value = '{SHA}' + Base64.encode64(Digest::SHA1.digest(str)).chomp! "
                                    }
                                }
                            ],
                            "message": "Should not use SHA1 to generate hashes. There is a proven SHA1 hash collision by Google, which could lead to vulnerabilities. Use SHA256, SHA3 or other hashing functions instead.",
                            "ruleId": "ruby.lang.security.weak-hashes-sha1.weak-hashes-sha1"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 31,
                                        "endLine": 31,
                                        "snippet": "         attribute_value = '{SSHA}' + Base64.encode64(Digest::SHA1.digest(str + salt) + salt).chomp!"
                                    }
                                }
                            ],
                            "message": "Should not use SHA1 to generate hashes. There is a proven SHA1 hash collision by Google, which could lead to vulnerabilities. Use SHA256, SHA3 or other hashing functions instead.",
                            "ruleId": "ruby.lang.security.weak-hashes-sha1.weak-hashes-sha1"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_2361_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_465_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2299_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2367_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 203,
                                        "endLine": 203,
                                        "snippet": "\t\t\t\t$t_filter = unserialize( $t_token );"
                                    }
                                }
                            ],
                            "message": "Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution. Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).",
                            "ruleId": "php.lang.security.unserialize-use.unserialize-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_3809_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1485_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2374_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 231,
                                        "endLine": 231,
                                        "snippet": "     memset(&argument, 0, sizeof(argument));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_10_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2412_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_199_0.cpp",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2860_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1646_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2066_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1355_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2196_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5309_0.cpp",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_337_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 91,
                                        "endLine": 91,
                                        "snippet": "\t\t\t\t@unlink($tmpfilePath);"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 141,
                                        "endLine": 141,
                                        "snippet": "\t\t\t\t@unlink($tmpName);"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 197,
                                        "endLine": 197,
                                        "snippet": "\t\t@unlink($filePath);"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 58,
                                        "endLine": 58,
                                        "snippet": "\tif($chunks < 2 && file_exists($targetDir . DIRECTORY_SEPARATOR . $fileName))"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 65,
                                        "endLine": 65,
                                        "snippet": "\t\twhile(file_exists($targetDir . DIRECTORY_SEPARATOR . $fileName_a . '_' . $count . $fileName_b))"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 120,
                                        "endLine": 120,
                                        "snippet": "\t\t\t$out = fopen(\"{$filePath}.part\", $chunk == 0 ? \"wb\" : \"ab\");"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 158,
                                        "endLine": 158,
                                        "snippet": "\t\t$out = fopen(\"{$filePath}.part\", $chunk == 0 ? \"wb\" : \"ab\");"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 197,
                                        "endLine": 197,
                                        "snippet": "\t\t@unlink($filePath);"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 203,
                                        "endLine": 203,
                                        "snippet": "\t$fileSize = filesize($filePath);"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 211,
                                        "endLine": 211,
                                        "snippet": "\t\t\t$fileSize = filesize($jpegFile);"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_4261_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 84,
                                        "endLine": 84,
                                        "snippet": "\t\tmemset(rpath, 0, sizeof(rpath));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 110,
                                        "endLine": 110,
                                        "snippet": "\t\tmemset(ctrl->cwd, 0, sizeof(ctrl->cwd));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 148,
                                        "endLine": 148,
                                        "snippet": "\tmemset(&server, 0, sizeof(server));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_4357_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1149_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1101_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5764_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1264_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 258,
                                        "endLine": 258,
                                        "snippet": "\tmemset(&connect, 0, sizeof(connect));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_4438_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1131_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3607_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2957_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5712_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 175,
                                        "endLine": 193,
                                        "snippet": "$htmlString .= '</select>'\n    . '</td>'\n    . '</tr>'\n    . '<tr><td>' . __('VIEW name') . '</td>'\n    . '<td><input type=\"text\" size=\"20\" name=\"view[name]\" onfocus=\"this.select()\"'\n    . ' value=\"' . htmlspecialchars($view['name']) . '\" />'\n    . '</td>'\n    . '</tr>'\n    . '<tr><td>' . __('Column names') . '</td>'\n    . '<td><input type=\"text\" maxlength=\"100\" size=\"50\" name=\"view[column_names]\"'"
                                    }
                                }
                            ],
                            "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.",
                            "ruleId": "php.lang.security.injection.tainted-sql-string.tainted-sql-string"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_1905_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5145_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1251_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3683_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5775_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4879_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_783_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 223,
                                        "endLine": 223,
                                        "snippet": "\tchild.exec(cmd, {"
                                    }
                                }
                            ],
                            "message": "Detected calls to child_process from a function argument `repo`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
                            "ruleId": "javascript.lang.security.detect-child-process.detect-child-process"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 89,
                                        "endLine": 89,
                                        "snippet": "\tthis.repos.create(path.join(organization, name), cb);"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 89,
                                        "endLine": 89,
                                        "snippet": "\tthis.repos.create(path.join(organization, name), cb);"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 152,
                                        "endLine": 152,
                                        "snippet": "\treturn path.join(this.workDir, organization, name);"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 152,
                                        "endLine": 152,
                                        "snippet": "\treturn path.join(this.workDir, organization, name);"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 167,
                                        "endLine": 167,
                                        "snippet": "\tvar dir = path.join(this.repoDir, organization, name);"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 167,
                                        "endLine": 167,
                                        "snippet": "\tvar dir = path.join(this.repoDir, organization, name);"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 221,
                                        "endLine": 221,
                                        "snippet": "\tvar cmd = ['git', 'pull', 'file://' + path.resolve(self.repoDir, repo.organization, repo.name), repo.branch].join(' ');"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 221,
                                        "endLine": 221,
                                        "snippet": "\tvar cmd = ['git', 'pull', 'file://' + path.resolve(self.repoDir, repo.organization, repo.name), repo.branch].join(' ');"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_1744_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2214_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1709_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5012_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4687_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3842_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4411_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5454_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5237_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1756_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2003_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5586_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3713_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4652_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5596_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1348_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3861_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_957_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4152_0.cc",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4180_0.py",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 228,
                                        "endLine": 230,
                                        "snippet": "    response = flask.make_response(flask.send_file(\n        str(data_file),\n    ))"
                                    }
                                }
                            ],
                            "message": "Be careful with `flask.make_response()`. If this response is rendered onto a webpage, this could create a cross-site scripting (XSS) vulnerability. `flask.make_response()` will not autoescape HTML. If you are rendering HTML, write your HTML in a template file and use `flask.render_template()` which will take care of escaping. If you are returning data from an API, consider using `flask.jsonify()`.",
                            "ruleId": "python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_4016_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 40,
                                        "endLine": 40,
                                        "snippet": "      ? path.resolve(process.cwd(), options.skeleton)"
                                    }
                                }
                            ],
                            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
                            "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_2917_0.go",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5028_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1266_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_559_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1154_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1917_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4067_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1295_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2827_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 53,
                                        "endLine": 53,
                                        "snippet": "\t\t@unlink(AT_CONTENT_DIR.'/feeds/'.$feed_id.'_rss.cache');"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 47,
                                        "endLine": 47,
                                        "snippet": "\t\tif ($f = @fopen($title_file, 'w')) {"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 53,
                                        "endLine": 53,
                                        "snippet": "\t\t@unlink(AT_CONTENT_DIR.'/feeds/'.$feed_id.'_rss.cache');"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 71,
                                        "endLine": 71,
                                        "snippet": "\tif (file_exists($title_file)) {"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 72,
                                        "endLine": 72,
                                        "snippet": "\t\t$_GET['title'] = file_get_contents($title_file);"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_3288_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 34,
                                        "endLine": 34,
                                        "snippet": "\tmemset (buf, 0, sizeof (buf)) ;"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_5155_0.phtml",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3518_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 39,
                                        "endLine": 39,
                                        "snippet": "\tmemset(dctx, 0, sizeof(*dctx));"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_3749_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5862_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 81,
                                        "endLine": 81,
                                        "snippet": "    var re = new RegExp('[?][^#]*' + name + '=([^&#]*)'),"
                                    }
                                }
                            ],
                            "message": "RegExp() called with a `name` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",
                            "ruleId": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 68,
                                        "endLine": 68,
                                        "snippet": "                val = obj[i].toString().replace(\"\\n\", \" \");"
                                    }
                                }
                            ],
                            "message": "`obj[i].toString().replace` method will only replace the first occurrence when used with a string argument (\"\\n\"). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag.",
                            "ruleId": "javascript.lang.security.audit.incomplete-sanitization.incomplete-sanitization"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_659_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_865_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 38,
                                        "endLine": 38,
                                        "snippet": "    var result = vm.runInContext(code, sandbox);"
                                    }
                                }
                            ],
                            "message": "Make sure that unverified user data can not reach vm.runInContext.",
                            "ruleId": "javascript.lang.security.audit.vm-injection.vm-runincontext-context-injection"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_3815_0.js",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 132,
                                        "endLine": 132,
                                        "snippet": "    var re = new RegExp(\"([?|&])\" + param + \"=.*?(&|$)\",\"i\");"
                                    }
                                }
                            ],
                            "message": "RegExp() called with a `param` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",
                            "ruleId": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_75_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3295_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 46,
                                        "endLine": 46,
                                        "snippet": "            memset(d + *x, value, n);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 53,
                                        "endLine": 53,
                                        "snippet": "            memset(d + *x, value, run);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 153,
                                        "endLine": 153,
                                        "snippet": "    memset(frame->data[0], 0, s->height * frame->linesize[0]);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 197,
                                        "endLine": 197,
                                        "snippet": "    memset(palette + npal, 0, AVPALETTE_SIZE - npal * 4);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_958_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_189_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_604_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2448_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 17,
                                        "endLine": 17,
                                        "snippet": "    exec ($cmd.\" \".$v_user.\" json\", $output, $return_var);"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection.",
                            "ruleId": "php.lang.security.exec-use.exec-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 47,
                                        "endLine": 47,
                                        "snippet": "        exec ($cmd.\" \".$v_user.\" json\", $output, $return_var);"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection.",
                            "ruleId": "php.lang.security.exec-use.exec-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 57,
                                        "endLine": 57,
                                        "snippet": "                exec ($cmd.\" \".$v_user.\" \".$v_password, $output, $return_var);"
                                    }
                                }
                            ],
                            "message": "Executing non-constant commands. This can lead to command injection.",
                            "ruleId": "php.lang.security.exec-use.exec-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 58,
                                        "endLine": 58,
                                        "snippet": "                unlink($v_password);"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_5357_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1845_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2555_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_719_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 98,
                                        "endLine": 98,
                                        "snippet": "        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);"
                                    }
                                }
                            ],
                            "message": "SSL verification is disabled but should not be (currently CURLOPT_SSL_VERIFYPEER= false)",
                            "ruleId": "php.lang.security.curl-ssl-verifypeer-off.curl-ssl-verifypeer-off"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_4924_0.phtml",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2470_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1759_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5410_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 157,
                                        "endLine": 157,
                                        "snippet": "\t\tmemset(data + datalen, 0x00, enclen - datalen);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_315_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 88,
                                        "endLine": 88,
                                        "snippet": "    memset(p, 0xFF, padlen);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_2534_0.cc",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4657_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_2979_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1691_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4733_0.c",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 290,
                                        "endLine": 290,
                                        "snippet": "\tmemset(inbuf, 0, 256);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 291,
                                        "endLine": 291,
                                        "snippet": "\tmemset(outbuf, 0, 256);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 320,
                                        "endLine": 320,
                                        "snippet": "\tmemset(mailbox->buf, 0, 256);"
                                    }
                                }
                            ],
                            "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.",
                            "ruleId": "c.lang.security.insecure-use-memset.insecure-use-memset"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_1072_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3699_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5321_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3182_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5673_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4408_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_311_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 48,
                                        "endLine": 48,
                                        "snippet": "if (@file_exists ($root . $_POST['path'] . '/' . $_FILES['file']['name'])) {"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 58,
                                        "endLine": 58,
                                        "snippet": "\t@chmod ($root . $_POST['path'] . '/' . $_FILES['file']['name'], 0666);"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./bad_4262_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1468_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1465_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_2746_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1152_0.php",
            "vulnerabilities": [
                {
                    "tool": "Semgrep OSS",
                    "results": [
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 71,
                                        "endLine": 71,
                                        "snippet": "\t\t\t\t\t\t@unlink($call_recording_path.'/'.$call_recording_name);"
                                    }
                                }
                            ],
                            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
                            "ruleId": "php.lang.security.unlink-use.unlink-use"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 70,
                                        "endLine": 70,
                                        "snippet": "\t\t\t\t\tif (file_exists($call_recording_path.'/'.$call_recording_name)) {"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        },
                        {
                            "locations": [
                                {
                                    "region": {
                                        "startLine": 71,
                                        "endLine": 71,
                                        "snippet": "\t\t\t\t\t\t@unlink($call_recording_path.'/'.$call_recording_name);"
                                    }
                                }
                            ],
                            "message": "File name based on user input risks server-side request forgery.",
                            "ruleId": "php.lang.security.injection.tainted-filename.tainted-filename"
                        }
                    ]
                }
            ],
            "isVulnerable": true
        },
        {
            "filepath": "./good_5771_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4544_0.py",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5850_0.cpp",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4746_0.h",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3029_0.h",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4175_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_29_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4651_0.rb",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_3608_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_5126_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_5470_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4920_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_506_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4471_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1135_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_3206_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4952_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_1929_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./bad_4083_0.php",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_1577_0.java",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4684_0.c",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        },
        {
            "filepath": "./good_4930_0.js",
            "vulnerabilities": [
            ],
            "isVulnerable": false
        }
    ],
    "statistics": {
        "targetFiles": 1384,
        "scannedFiles": 1384,
        "vulnerableFiles": 320,
        "scanStartTime": "2024-01-30T19:22:15.282",
        "scanEndTime": "2024-01-30T19:22:38.435",
        "scanDurationSeconds": 23
    },
    "evaluation": {
        "positives": 692,
        "negatives": 692,
        "truePositives": 162,
        "falsePositives": 158,
        "trueNegatives": 534,
        "falseNegatives": 530,
        "accuracy": 0.5028901734104047,
        "precision": 0.50625,
        "recall": 0.23410404624277456,
        "f1": 0.3201581027667984
    }
}